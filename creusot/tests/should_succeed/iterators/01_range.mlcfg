module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type c01range_range  =
    | C01Range_Range isize isize
    
  let function c01range_range_Range_start (self : c01range_range) : isize =
    match (self) with
      | C01Range_Range a _ -> a
      end
  let function c01range_range_Range_end (self : c01range_range) : isize =
    match (self) with
      | C01Range_Range _ a -> a
      end
end
module C01Range_Common_Iterator_Item
  type self
  type item
end
module C01Range_Common_Iterator_Completed_Interface
  type self
  predicate completed (self : self)
end
module C01Range_Common_Iterator_Completed
  type self
  predicate completed [#"../common.rs" 9 4 31] (self : self)
end
module C01Range_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  predicate produces [#"../common.rs" 12 4 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl (a : self) : ()
end
module C01Range_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 16 4 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . [#"../common.rs" 15 4 41] Produces0.produces a (Seq.empty ) a
end
module C01Range_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module C01Range_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 22 4 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 20 4 34] Produces0.produces b bc c) -> ([#"../common.rs" 19 4 34] Produces0.produces a ab b) -> ([#"../common.rs" 21 4 44] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Common_Iterator_Next_Interface
  type self
  use Type
  use seq.Seq
  use prelude.Prelude
  clone C01Range_Common_Iterator_Completed_Interface as Completed0 with type self = self
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
    ensures { [#"../common.rs" 24 4 7] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C01Range_Common_Iterator_Next
  type self
  use Type
  use seq.Seq
  use prelude.Prelude
  clone C01Range_Common_Iterator_Completed as Completed0 with type self = self
  clone C01Range_Common_Iterator_Item as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces as Produces0 with type self = self, type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
    ensures { [#"../common.rs" 24 4 7] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( * self)
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C01Range_Impl0_Completed_Interface
  use Type
  predicate completed (self : Type.c01range_range)
end
module C01Range_Impl0_Completed
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  predicate completed [#"../01_range.rs" 18 4 30] (self : Type.c01range_range) =
    [#"../01_range.rs" 18 4 30] Type.c01range_range_Range_start self >= Type.c01range_range_Range_end self
end
module C01Range_Impl0_Produces_Interface
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  predicate produces (self : Type.c01range_range) (visited : Seq.seq isize) (o : Type.c01range_range)
end
module C01Range_Impl0_Produces
  use Type
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use mach.int.Int32
  predicate produces [#"../01_range.rs" 23 4 64] (self : Type.c01range_range) (visited : Seq.seq isize) (o : Type.c01range_range)
    
   =
    [#"../01_range.rs" 23 4 64] Type.c01range_range_Range_end self = Type.c01range_range_Range_end o && Type.c01range_range_Range_start self <= Type.c01range_range_Range_start o && Seq.length visited = Int64.to_int (Type.c01range_range_Range_start o) - Int64.to_int (Type.c01range_range_Range_start self) && (forall i : (int) . 0 <= i && i < Seq.length visited -> Int64.to_int (Seq.get visited i) = Int64.to_int (Type.c01range_range_Range_start self) + i)
end
module C01Range_Impl0_ProducesRefl_Interface
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_refl (a : Type.c01range_range) : ()
end
module C01Range_Impl0_ProducesRefl
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_refl [#"../01_range.rs" 34 4 29] (a : Type.c01range_range) : () =
    [#"../01_range.rs" 34 4 29] ()
  axiom produces_refl_spec : forall a : Type.c01range_range . [#"../01_range.rs" 33 4 41] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl0_ProducesRefl_Impl
  use seq.Seq
  use Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_refl (a : Type.c01range_range) : ()
    ensures { [#"../01_range.rs" 33 4 41] Produces0.produces a (Seq.empty ) a }
    
   =
    [#"../01_range.rs" 34 4 29] ()
end
module C01Range_Impl0_ProducesTrans_Interface
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_trans (a : Type.c01range_range) (ab : Seq.seq isize) (b : Type.c01range_range) (bc : Seq.seq isize) (c : Type.c01range_range) : ()
    
end
module C01Range_Impl0_ProducesTrans
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_trans [#"../01_range.rs" 40 4 90] (a : Type.c01range_range) (ab : Seq.seq isize) (b : Type.c01range_range) (bc : Seq.seq isize) (c : Type.c01range_range) : ()
    
   =
    [#"../01_range.rs" 40 4 90] ()
  axiom produces_trans_spec : forall a : Type.c01range_range, ab : Seq.seq isize, b : Type.c01range_range, bc : Seq.seq isize, c : Type.c01range_range . ([#"../01_range.rs" 38 4 34] Produces0.produces b bc c) -> ([#"../01_range.rs" 37 4 34] Produces0.produces a ab b) -> ([#"../01_range.rs" 39 4 44] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_ProducesTrans_Impl
  use seq.Seq
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_trans (a : Type.c01range_range) (ab : Seq.seq isize) (b : Type.c01range_range) (bc : Seq.seq isize) (c : Type.c01range_range) : ()
    requires {[#"../01_range.rs" 38 4 34] Produces0.produces b bc c}
    requires {[#"../01_range.rs" 37 4 34] Produces0.produces a ab b}
    ensures { [#"../01_range.rs" 39 4 44] Produces0.produces a (Seq.(++) ab bc) c }
    
   =
    [#"../01_range.rs" 40 4 90] ()
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module C01Range_Impl0_Next_Interface
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use seq.Seq
  clone C01Range_Impl0_Produces_Interface as Produces0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Completed_Interface as Completed0
  val next [@cfg:stackify] (self : borrowed (Type.c01range_range)) : Type.core_option_option isize
    ensures { [#"../01_range.rs" 43 4 7] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( ^ self) && Resolve0.resolve self
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
end
module C01Range_Impl0_Next
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use seq.Seq
  clone C01Range_Impl0_Produces as Produces0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Completed as Completed0
  let rec cfg next [@cfg:stackify] [#"../01_range.rs" 47 4 39] (self : borrowed (Type.c01range_range)) : Type.core_option_option isize
    ensures { [#"../01_range.rs" 43 4 7] match (result) with
      | Type.Core_Option_Option_None -> Completed0.completed ( ^ self) && Resolve0.resolve self
      | Type.Core_Option_Option_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) && not Completed0.completed ( * self)
      end }
    
   =
  var _0 : Type.core_option_option isize;
  var self_1 : borrowed (Type.c01range_range);
  var _2 : bool;
  var _3 : isize;
  var _4 : isize;
  var r_5 : isize;
  var _6 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.c01range_range_Range_start ( * self_1);
    _4 <- Type.c01range_range_Range_end ( * self_1);
    _2 <- ([#"../01_range.rs" 48 11 33] _3 >= _4);
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB3
  }
  BB2 {
    r_5 <- Type.c01range_range_Range_start ( * self_1);
    self_1 <- { self_1 with current = (let Type.C01Range_Range a b =  * self_1 in Type.C01Range_Range ([#"../01_range.rs" 52 12 27] Type.c01range_range_Range_start ( * self_1) + (1 : isize)) b) };
    assume { Resolve0.resolve self_1 };
    _6 <- r_5;
    _0 <- Type.Core_Option_Option_Some _6;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl0_Item
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  type item  =
    isize
end
module C01Range_Impl0
  use Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.c01range_range
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_Completed as Completed0
  clone C01Range_Impl0_Next_Interface as Next0 with predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Produces0.produces = Produces0.produces
  clone C01Range_Common_Iterator_Completed_Interface as Completed1 with type self = Type.c01range_range,
  predicate completed = Completed0.completed
  clone C01Range_Impl0_Item as Item0
  clone C01Range_Common_Iterator_Next_Interface as Next1 with type self = Type.c01range_range, val next = Next0.next,
  type Item0.item = Item0.item, predicate Completed0.completed = Completed0.completed,
  predicate Produces0.produces = Produces0.produces
  clone C01Range_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = Type.c01range_range,
  function produces_trans = ProducesTrans0.produces_trans, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  clone C01Range_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = Type.c01range_range,
  function produces_refl = ProducesRefl0.produces_refl, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  clone C01Range_Common_Iterator_Produces_Interface as Produces1 with type self = Type.c01range_range,
  predicate produces = Produces0.produces, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Item as Item1 with type self = Type.c01range_range, type item = Item0.item
end
