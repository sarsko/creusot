module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
end
module C273_Ex_Interface
  val ex [@cfg:stackify] (_ : ()) : ()
end
module C273_Ex
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  let rec cfg ex [@cfg:stackify] [#"../273.rs" 4 0 7] (_ : ()) : () =
  var _0 : ();
  var _1 : Type.core_option_option bool;
  var _2 : isize;
  var b_3 : bool;
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_Some true;
    switch (_1)
      | Type.Core_Option_Option_Some _ -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    b_3 <- Type.core_option_option_Some_0 _1;
    assert { [#"../273.rs" 6 8 24] b_3 };
    _4 <- ();
    _0 <- ();
    goto BB3
  }
  BB2 {
    _0 <- ();
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
