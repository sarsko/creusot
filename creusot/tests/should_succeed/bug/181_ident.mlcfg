module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C181Ident_MaxInt_Interface
  use mach.int.Int
  function max_Int (a : int) (b : int) : int
end
module C181Ident_MaxInt
  use mach.int.Int
  function max_Int [#"../181_ident.rs" 7 0 33] (a : int) (b : int) : int =
    [#"../181_ident.rs" 7 0 33] if a < b then b else a
end
module C181Ident_MaxUsize_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone C181Ident_MaxInt_Interface as MaxInt0
  val max_usize [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"../181_ident.rs" 16 0 38] UInt64.to_int result = MaxInt0.max_Int (UInt64.to_int a) (UInt64.to_int b) }
    
end
module C181Ident_MaxUsize
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Prelude
  clone C181Ident_MaxInt as MaxInt0
  val max_usize [@cfg:stackify] (a : usize) (b : usize) : usize
    ensures { [#"../181_ident.rs" 16 0 38] UInt64.to_int result = MaxInt0.max_Int (UInt64.to_int a) (UInt64.to_int b) }
    
end
