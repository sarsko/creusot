module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type switch_option 't =
    | Switch_Option_Some 't
    | Switch_Option_None
    
  let function switch_option_Some_0 (self : switch_option 't) : 't =
    match (self) with
      | Switch_Option_Some a -> a
      | Switch_Option_None -> any 't
      end
end
module Switch_Test_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val test [@cfg:stackify] (o : Type.switch_option uint32) : bool
end
module Switch_Test
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use mach.int.Int64
  let rec cfg test [@cfg:stackify] [#"../switch.rs" 7 0 31] (o : Type.switch_option uint32) : bool =
  var _0 : bool;
  var o_1 : Type.switch_option uint32;
  var _2 : isize;
  var x_3 : uint32;
  var _4 : uint32;
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    switch (o_1)
      | Type.Switch_Option_Some _ -> goto BB3
      | Type.Switch_Option_None -> goto BB1
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    x_3 <- Type.switch_option_Some_0 o_1;
    _4 <- x_3;
    _0 <- ([#"../switch.rs" 9 19 24] _4 > (0 : uint32));
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Switch_Test2_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  val test2 [@cfg:stackify] (o : (Type.switch_option uint32, uint32)) : uint32
end
module Switch_Test2
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use mach.int.Int64
  let rec cfg test2 [@cfg:stackify] [#"../switch.rs" 14 0 38] (o : (Type.switch_option uint32, uint32)) : uint32 =
  var _0 : uint32;
  var o_1 : (Type.switch_option uint32, uint32);
  var _2 : isize;
  var x_3 : uint32;
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    switch (let (a, _) = o_1 in a)
      | Type.Switch_Option_Some _ -> goto BB3
      | Type.Switch_Option_None -> goto BB1
      end
  }
  BB1 {
    _0 <- (let (_, a) = o_1 in a);
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    x_3 <- Type.switch_option_Some_0 (let (a, _) = o_1 in a);
    _0 <- x_3;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Switch_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Switch_Main
  let rec cfg main [@cfg:stackify] [#"../switch.rs" 21 0 9] (_ : ()) : () =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
