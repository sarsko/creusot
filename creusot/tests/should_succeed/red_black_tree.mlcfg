module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type redblacktree_color  =
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type redblacktree_tree 'k 'v =
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    with redblacktree_node 'k 'v =
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    
  let function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v =
    match (self) with
      | RedBlackTree_Node a _ _ _ _ -> a
      end
  let function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k =
    match (self) with
      | RedBlackTree_Node _ _ a _ _ -> a
      end
  let function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v =
    match (self) with
      | RedBlackTree_Node _ _ _ _ a -> a
      end
  let function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color =
    match (self) with
      | RedBlackTree_Node _ a _ _ _ -> a
      end
  let function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v =
    match (self) with
      | RedBlackTree_Node _ _ _ a _ -> a
      end
  let function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    
   =
    match (self) with
      | RedBlackTree_Tree a -> a
      end
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type creusotcontracts_logic_ghost_ghost 't =
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module RedBlackTree_Impl7_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl7_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 16 9 14] (self : Type.redblacktree_color) : Type.redblacktree_color
    
   =
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module RedBlackTree_Impl2_IsRedLog_Interface
  type k
  type v
  use Type
  predicate is_red_log (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl2_IsRedLog
  type k
  type v
  use Type
  predicate is_red_log [#"../red_black_tree.rs" 368 4 31] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 368 4 31] match (Type.redblacktree_tree_Tree_node self) with
      | Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right) -> true
      | _ -> false
      end
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl4_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl4_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 402 4 53] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 402 4 53] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> false
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> has_mapping left k v || has_mapping right k v || k = Model0.model key && v = val'
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module RedBlackTree_Impl0_OrdInvariantHere_Interface
  type k
  type v
  use Type
  predicate ord_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl0_OrdInvariantHere
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate ord_invariant_here [#"../red_black_tree.rs" 169 4 39] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 169 4 39] (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v -> LtLog0.lt_log k (Model0.model (Type.redblacktree_node_Node_key self))) && (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key self)) k)
end
module RedBlackTree_Impl1_OrdInvariant_Interface
  type k
  type v
  use Type
  predicate ord_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl1_OrdInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_OrdInvariantHere_Interface as OrdInvariantHere0 with type k = k, type v = v
  predicate ord_invariant [#"../red_black_tree.rs" 324 4 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 324 4 34] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in OrdInvariantHere0.ord_invariant_here node && ord_invariant left && ord_invariant right
      end
end
module RedBlackTree_Impl0_OrdInvariant_Interface
  type k
  type v
  use Type
  predicate ord_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl0_OrdInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl0_OrdInvariantHere_Interface as OrdInvariantHere0 with type k = k, type v = v
  predicate ord_invariant [#"../red_black_tree.rs" 177 4 34] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 177 4 34] OrdInvariantHere0.ord_invariant_here self && OrdInvariant0.ord_invariant (Type.redblacktree_node_Node_left self) && OrdInvariant0.ord_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl4_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  predicate has_height (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl4_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  predicate has_height [#"../red_black_tree.rs" 413 4 39] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 413 4 39] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> h = 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right)) -> has_height left h && has_height right h
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Black) key val' right)) -> has_height left (h - 1) && has_height right (h - 1)
      end
end
module RedBlackTree_Impl3_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  predicate has_height (self : Type.redblacktree_node k v) (h : int)
end
module RedBlackTree_Impl3_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl4_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  predicate has_height [#"../red_black_tree.rs" 388 4 39] (self : Type.redblacktree_node k v) (h : int) =
    [#"../red_black_tree.rs" 388 4 39] match (self) with
      | Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Red) key val' right -> HasHeight0.has_height left h && HasHeight0.has_height right h
      | Type.RedBlackTree_Node left (Type.RedBlackTree_Color_Black) key val' right -> HasHeight0.has_height left (h - 1) && HasHeight0.has_height right (h - 1)
      end
end
module RedBlackTree_Impl4_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl4_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings [#"../red_black_tree.rs" 426 4 43] (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 426 4 43] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl3_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
end
module RedBlackTree_Impl3_SameMappings
  type k
  type v
  use Type
  clone RedBlackTree_Impl4_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  predicate same_mappings [#"../red_black_tree.rs" 378 4 43] (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 378 4 43] forall ot : (Type.redblacktree_tree k v) . forall st : (Type.redblacktree_tree k v) . match (st) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> self = x
      | _ -> false
      end && match (ot) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> o = x
      | _ -> false
      end -> SameMappings0.same_mappings st ot
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t
  type modelTy  =
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y -> CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal) && (CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Equal -> x = y)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures {  ^ dest = DefaultLog0.default_log () }
    ensures { result =  * dest }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures {  ^ dest = DefaultLog0.default_log () }
    ensures { result =  * dest }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog_Interface
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t =
    Type.Core_Option_Option_None
end
module CreusotContracts_Std1_Option_Impl0
  type t
  use Type
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = t
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog1 with type self = Type.core_option_option t,
  function default_log = DefaultLog0.default_log
end
module RedBlackTree_Impl0_RotateRight_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl0_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 40 4 42] IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 39 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 48 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 45 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 44 4 46] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 43 4 42] IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 42 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 41 4 44] SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl0_RotateRight
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl0_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl4_HasHeight as HasHeight1 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_node k v,
  function Model0.model = Model0.model
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 49 4 30] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 40 4 42] IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 39 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 48 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 45 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 44 4 46] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 43 4 42] IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 42 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 41 4 44] SameMappings0.same_mappings ( * self) ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v);
  var _3 : Type.redblacktree_node k v;
  var _4 : Type.redblacktree_node k v;
  var x_5 : Type.redblacktree_node k v;
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _9 : isize;
  var x_10 : Type.redblacktree_node k v;
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : borrowed (Type.redblacktree_tree k v);
  var _17 : ();
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : Type.redblacktree_color;
  var _22 : Type.redblacktree_color;
  var _23 : ();
  var _24 : ();
  var _25 : Type.redblacktree_tree k v;
  var _26 : Type.core_option_option (Type.redblacktree_node k v);
  var _27 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- ([#"../red_black_tree.rs" 50 23 44] Record0.record _3);
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _8 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _8)) b c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _6 <- ([#"../red_black_tree.rs" 58 34 69] Take0.take _7);
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _8 };
    switch (_6)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve3.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve _6 };
    absurd
  }
  BB5 {
    assume { Resolve5.resolve x_10 };
    x_10 <- Type.core_option_option_Some_0 _6;
    assume { Resolve5.resolve x_5 };
    x_5 <- x_10;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve _6 };
    _14 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _14) b c d e) };
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _16 <- borrow_mut (Type.redblacktree_node_Node_right x_5);
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node a b c d ( ^ _16));
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _12 <- ([#"../red_black_tree.rs" 68 8 52] Swap0.swap _13 _15);
    goto BB8
  }
  BB8 {
    assume { Resolve6.resolve _14 };
    assume { Resolve6.resolve _16 };
    _18 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _18) };
    _20 <- borrow_mut x_5;
    x_5 <-  ^ _20;
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _17 <- ([#"../red_black_tree.rs" 74 8 36] Swap1.swap _18 _19);
    goto BB9
  }
  BB9 {
    assume { Resolve7.resolve _20 };
    _21 <- Type.redblacktree_node_Node_color x_5;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _21 c d e) };
    _22 <- Type.RedBlackTree_Color_Red;
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node a _22 c d e);
    assert { [#"../red_black_tree.rs" 82 8 81] HasMapping0.has_mapping (Type.redblacktree_node_Node_left (Model0.model old_self_2)) (Model1.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _23 <- ();
    assert { [#"../red_black_tree.rs" 83 8 117] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left x_5) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_left (Model0.model old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _24 <- ();
    assume { Resolve5.resolve _27 };
    _27 <- x_5;
    _26 <- Type.Core_Option_Option_Some _27;
    goto BB11
  }
  BB11 {
    _25 <- Type.RedBlackTree_Tree _26;
    goto BB12
  }
  BB12 {
    assume { Resolve8.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _25) };
    goto BB13
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Core_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module RedBlackTree_Impl0_RotateLeft_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl0_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 93 4 43] IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 92 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 101 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 98 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 97 4 46] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 96 4 41] IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 95 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 94 4 44] SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl0_RotateLeft
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl0_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl4_HasHeight as HasHeight1 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_node k v,
  function Model0.model = Model0.model
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 102 4 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 93 4 43] IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 92 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 101 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 98 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 97 4 46] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 96 4 41] IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 95 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 94 4 44] SameMappings0.same_mappings ( * self) ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var old_self_2 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_node k v);
  var _3 : Type.redblacktree_node k v;
  var _4 : Type.redblacktree_node k v;
  var x_5 : Type.redblacktree_node k v;
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _9 : Type.core_option_option (Type.redblacktree_node k v);
  var _10 : isize;
  var x_11 : Type.redblacktree_node k v;
  var _12 : ();
  var _13 : ();
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : borrowed (Type.redblacktree_tree k v);
  var _17 : borrowed (Type.redblacktree_tree k v);
  var _18 : ();
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : Type.redblacktree_color;
  var _23 : Type.redblacktree_color;
  var _24 : ();
  var _25 : ();
  var _26 : Type.redblacktree_tree k v;
  var _27 : Type.core_option_option (Type.redblacktree_node k v);
  var _28 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <-  * self_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_self_2 <- ([#"../red_black_tree.rs" 103 23 44] Record0.record _3);
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_2 };
    _8 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _8))) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _9 <- Type.Core_Option_Option_None;
    _6 <- ([#"../red_black_tree.rs" 105 34 79] Replace0.replace _7 _9);
    goto BB2
  }
  BB2 {
    assume { Resolve2.resolve _8 };
    switch (_6)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve3.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve4.resolve _6 };
    absurd
  }
  BB5 {
    assume { Resolve5.resolve x_11 };
    x_11 <- Type.core_option_option_Some_0 _6;
    assume { Resolve5.resolve x_5 };
    x_5 <- x_11;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve _6 };
    _15 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _15)) };
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _17 <- borrow_mut (Type.redblacktree_node_Node_left x_5);
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node ( ^ _17) b c d e);
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _13 <- ([#"../red_black_tree.rs" 109 8 52] Swap0.swap _14 _16);
    goto BB8
  }
  BB8 {
    assume { Resolve6.resolve _15 };
    assume { Resolve6.resolve _17 };
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _21 <- borrow_mut x_5;
    x_5 <-  ^ _21;
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _18 <- ([#"../red_black_tree.rs" 110 8 36] Swap1.swap _19 _20);
    goto BB9
  }
  BB9 {
    assume { Resolve7.resolve _21 };
    _22 <- Type.redblacktree_node_Node_color x_5;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _22 c d e) };
    _23 <- Type.RedBlackTree_Color_Red;
    x_5 <- (let Type.RedBlackTree_Node a b c d e = x_5 in Type.RedBlackTree_Node a _23 c d e);
    assert { [#"../red_black_tree.rs" 113 8 82] HasMapping0.has_mapping (Type.redblacktree_node_Node_right (Model0.model old_self_2)) (Model1.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _24 <- ();
    assert { [#"../red_black_tree.rs" 114 8 119] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right x_5) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_right (Model0.model old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _25 <- ();
    assume { Resolve5.resolve _28 };
    _28 <- x_5;
    _27 <- Type.Core_Option_Option_Some _28;
    goto BB11
  }
  BB11 {
    _26 <- Type.RedBlackTree_Tree _27;
    goto BB12
  }
  BB12 {
    assume { Resolve8.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _26 b c d e) };
    goto BB13
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl0_ColorInvariantHere_Interface
  type k
  type v
  use Type
  predicate color_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl0_ColorInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  predicate color_invariant_here [#"../red_black_tree.rs" 184 4 41] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 184 4 41] not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right self) && (Type.redblacktree_node_Node_color self = Type.RedBlackTree_Color_Red -> not IsRedLog0.is_red_log (Type.redblacktree_node_Node_left self))
end
module RedBlackTree_Impl1_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl1_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 337 4 36] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 337 4 36] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in ColorInvariantHere0.color_invariant_here node && color_invariant left && color_invariant right
      end
end
module RedBlackTree_Impl0_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl0_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl1_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 189 4 36] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 189 4 36] ColorInvariantHere0.color_invariant_here self && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left self) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl2_IsRed_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 359 4 43] result = IsRedLog0.is_red_log self }
    
end
module RedBlackTree_Impl2_IsRed
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 360 4 28] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 359 4 43] result = IsRedLog0.is_red_log self }
    
   =
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module RedBlackTree_Impl0_InsertRebalance_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl0_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl1_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  val insert_rebalance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 123 4 106] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) -> false}
    requires {[#"../red_black_tree.rs" 121 4 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 119 4 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 118 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 143 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 139 4 65] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 134 4 46] not IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( ^ self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( ^ self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 128 4 65] forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left l) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right l) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 126 4 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 125 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 124 4 44] SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl0_InsertRebalance
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl0_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  clone RedBlackTree_Impl4_HasHeight as HasHeight1 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl0_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl0_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings
  clone RedBlackTree_Impl0_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings
  clone RedBlackTree_Impl2_IsRed_Interface as IsRed0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  let rec cfg insert_rebalance [@cfg:stackify] [#"../red_black_tree.rs" 144 4 34] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 123 4 106] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) -> false}
    requires {[#"../red_black_tree.rs" 121 4 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 119 4 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 118 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 143 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 139 4 65] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 134 4 46] not IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> IsRedLog0.is_red_log (Type.redblacktree_node_Node_left ( ^ self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( ^ self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 128 4 65] forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && IsRedLog0.is_red_log (Type.redblacktree_node_Node_left l) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right l) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 126 4 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right ( * self)) ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 125 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 124 4 44] SameMappings0.same_mappings ( * self) ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : bool;
  var _4 : bool;
  var _5 : Type.redblacktree_tree k v;
  var _6 : bool;
  var _7 : bool;
  var _8 : Type.redblacktree_tree k v;
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_node k v);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.redblacktree_tree k v;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_node k v;
  var _18 : Type.core_option_option (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : Type.redblacktree_color;
  var _28 : ();
  var _29 : isize;
  var _30 : isize;
  var l_31 : borrowed (Type.redblacktree_node k v);
  var r_32 : borrowed (Type.redblacktree_node k v);
  var _33 : Type.redblacktree_color;
  var _34 : Type.redblacktree_color;
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _38 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.redblacktree_node_Node_right ( * self_1);
    _4 <- ([#"../red_black_tree.rs" 145 11 30] IsRed0.is_red _5);
    goto BB4
  }
  BB1 {
    _3 <- false;
    goto BB3
  }
  BB2 {
    _8 <- Type.redblacktree_node_Node_left ( * self_1);
    _7 <- ([#"../red_black_tree.rs" 145 35 53] IsRed0.is_red _8);
    goto BB5
  }
  BB3 {
    switch (_3)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _6 <- not _7;
    _3 <- _6;
    goto BB3
  }
  BB6 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _9 <- ([#"../red_black_tree.rs" 146 12 30] RotateLeft0.rotate_left _10);
    goto BB7
  }
  BB7 {
    _2 <- ();
    goto BB9
  }
  BB8 {
    _2 <- ();
    goto BB9
  }
  BB9 {
    _14 <- Type.redblacktree_node_Node_left ( * self_1);
    _13 <- ([#"../red_black_tree.rs" 149 11 29] IsRed0.is_red _14);
    goto BB13
  }
  BB10 {
    _12 <- false;
    goto BB12
  }
  BB11 {
    _19 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1));
    _18 <- ([#"../red_black_tree.rs" 149 33 56] AsRef0.as_ref _19);
    goto BB14
  }
  BB12 {
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _17 <- ([#"../red_black_tree.rs" 149 33 65] Unwrap0.unwrap _18);
    goto BB15
  }
  BB15 {
    _16 <- Type.redblacktree_node_Node_left _17;
    assume { Resolve0.resolve _17 };
    _15 <- ([#"../red_black_tree.rs" 149 33 79] IsRed0.is_red _16);
    goto BB16
  }
  BB16 {
    _12 <- _15;
    goto BB12
  }
  BB17 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 150 12 31] RotateRight0.rotate_right _21);
    goto BB18
  }
  BB18 {
    _11 <- ();
    goto BB20
  }
  BB19 {
    _11 <- ();
    goto BB20
  }
  BB20 {
    _24 <- Type.redblacktree_node_Node_left ( * self_1);
    _23 <- ([#"../red_black_tree.rs" 153 11 29] IsRed0.is_red _24);
    goto BB24
  }
  BB21 {
    _22 <- false;
    goto BB23
  }
  BB22 {
    _26 <- Type.redblacktree_node_Node_right ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 153 33 52] IsRed0.is_red _26);
    goto BB25
  }
  BB23 {
    switch (_22)
      | False -> goto BB30
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_23)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _22 <- _25;
    goto BB23
  }
  BB26 {
    _27 <- Type.RedBlackTree_Color_Red;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _27 c d e) };
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)))
      | Type.Core_Option_Option_Some _ -> goto BB28
      | _ -> goto BB27
      end
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    absurd
  }
  BB28 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)))
      | Type.Core_Option_Option_Some _ -> goto BB29
      | _ -> goto BB27
      end
  }
  BB29 {
    l_31 <- borrow_mut (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1))));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree (let Type.Core_Option_Option_Some a = Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)) in Type.Core_Option_Option_Some ( ^ l_31))) b c d e) };
    r_32 <- borrow_mut (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1))));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree (let Type.Core_Option_Option_Some a = Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)) in Type.Core_Option_Option_Some ( ^ r_32)))) };
    assume { Resolve1.resolve self_1 };
    _33 <- Type.RedBlackTree_Color_Black;
    l_31 <- { l_31 with current = (let Type.RedBlackTree_Node a b c d e =  * l_31 in Type.RedBlackTree_Node a _33 c d e) };
    assume { Resolve2.resolve l_31 };
    _34 <- Type.RedBlackTree_Color_Black;
    r_32 <- { r_32 with current = (let Type.RedBlackTree_Node a b c d e =  * r_32 in Type.RedBlackTree_Node a _34 c d e) };
    assume { Resolve2.resolve r_32 };
    assert { [#"../red_black_tree.rs" 159 20 55] OrdInvariant0.ord_invariant ( * l_31) };
    _35 <- ();
    assert { [#"../red_black_tree.rs" 160 20 55] OrdInvariant0.ord_invariant ( * r_32) };
    _36 <- ();
    _28 <- ();
    assert { [#"../red_black_tree.rs" 164 12 55] OrdInvariantHere0.ord_invariant_here ( * self_1) };
    _38 <- ();
    _0 <- ();
    goto BB31
  }
  BB30 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module RedBlackTree_Impl1_Invariant_Interface
  type k
  type v
  use Type
  predicate invariant' (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl1_Invariant
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl4_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  predicate invariant' [#"../red_black_tree.rs" 350 4 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 350 4 34] OrdInvariant0.ord_invariant self && ColorInvariant0.color_invariant self && (exists h : (int) . HasHeight0.has_height self h)
end
module RedBlackTree_Impl4_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl4_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc [#"../red_black_tree.rs" 433 4 82] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 433 4 82] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl6_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl6_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 513 4 35] (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 513 4 35] ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl6_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl6
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl6_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl1_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_Invariant_Interface as Invariant0 with type k = k, type v = v
  val new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 199 4 34] Invariant0.invariant' result }
    ensures { [#"../red_black_tree.rs" 198 4 45] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl1_New
  type k
  type v
  use Type
  use map.Const
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_HasHeight as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_Invariant as Invariant0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 200 4 30] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 199 4 34] Invariant0.invariant' result }
    ensures { [#"../red_black_tree.rs" 198 4 45] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
   =
  var _0 : Type.redblacktree_tree k v;
  var _1 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { [#"../red_black_tree.rs" 10 4 47] result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { [#"../red_black_tree.rs" 10 4 47] result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Max_Interface
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Max
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl1_InsertRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl1_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 205 4 42] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 204 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 213 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 212 4 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 211 4 46] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 210 4 67] not IsRedLog0.is_red_log ( * self) -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 207 4 75] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { [#"../red_black_tree.rs" 206 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    
end
module RedBlackTree_Impl1_InsertRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = Type.redblacktree_tree k v
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_HasHeight as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl3_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight0.has_height
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_tree k v,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl0_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant
  clone RedBlackTree_Impl0_InsertRebalance_Interface as InsertRebalance0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 214 4 15] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 205 4 42] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 204 4 40] OrdInvariant0.ord_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 213 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 212 4 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 211 4 46] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 210 4 67] not IsRedLog0.is_red_log ( * self) -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 207 4 75] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && not IsRedLog0.is_red_log (Type.redblacktree_node_Node_right node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { [#"../red_black_tree.rs" 206 4 39] OrdInvariant0.ord_invariant ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v);
  var _5 : Type.redblacktree_tree k v;
  var _6 : Type.redblacktree_tree k v;
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var _9 : ();
  var _10 : Type.core_option_option (Type.redblacktree_node k v);
  var _11 : Type.redblacktree_node k v;
  var _12 : Type.redblacktree_node k v;
  var _13 : Type.redblacktree_tree k v;
  var _14 : Type.core_option_option (Type.redblacktree_node k v);
  var _15 : Type.redblacktree_color;
  var _16 : k;
  var _17 : v;
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var node_20 : borrowed (Type.redblacktree_node k v);
  var _21 : ();
  var _22 : Type.core_cmp_ordering;
  var _23 : k;
  var _24 : k;
  var _25 : k;
  var _26 : int8;
  var _27 : borrowed (Type.redblacktree_tree k v);
  var _28 : k;
  var _29 : v;
  var _30 : ();
  var _31 : v;
  var _32 : borrowed (Type.redblacktree_tree k v);
  var _33 : k;
  var _34 : v;
  var _35 : ();
  var _36 : ();
  var _37 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _6 <-  * self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_self_4 <- ([#"../red_black_tree.rs" 218 23 44] Record0.record _5);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve old_self_4 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _7)) };
    switch ( * _7)
      | Type.Core_Option_Option_None -> goto BB6
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    node_20 <- borrow_mut (Type.core_option_option_Some_0 ( * _7));
    _7 <- { _7 with current = (let Type.Core_Option_Option_Some a =  * _7 in Type.Core_Option_Option_Some ( ^ node_20)) };
    assume { Resolve5.resolve _7 };
    _23 <- key_2;
    _25 <- Type.redblacktree_node_Node_key ( * node_20);
    _24 <- _25;
    assume { Resolve6.resolve _25 };
    _22 <- ([#"../red_black_tree.rs" 231 22 40] Cmp0.cmp _23 _24);
    goto BB17
  }
  BB5 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve val'_3 };
    assume { Resolve5.resolve _7 };
    absurd
  }
  BB6 {
    assume { Resolve5.resolve _7 };
    _14 <- Type.Core_Option_Option_None;
    _13 <- Type.RedBlackTree_Tree _14;
    goto BB7
  }
  BB7 {
    _15 <- Type.RedBlackTree_Color_Red;
    assume { Resolve3.resolve _16 };
    _16 <- key_2;
    assume { Resolve4.resolve _17 };
    _17 <- val'_3;
    _19 <- Type.Core_Option_Option_None;
    _18 <- Type.RedBlackTree_Tree _19;
    goto BB8
  }
  BB8 {
    _12 <- Type.RedBlackTree_Node _13 _15 _16 _17 _18;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _11 <- _12;
    goto BB13
  }
  BB13 {
    _10 <- Type.Core_Option_Option_Some _11;
    goto BB14
  }
  BB14 {
    assume { Resolve8.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _10) };
    goto BB15
  }
  BB15 {
    assume { Resolve2.resolve self_1 };
    goto BB16
  }
  BB16 {
    _0 <- ();
    goto BB29
  }
  BB17 {
    switch (_22)
      | Type.Core_Cmp_Ordering_Less -> goto BB20
      | Type.Core_Cmp_Ordering_Equal -> goto BB22
      | Type.Core_Cmp_Ordering_Greater -> goto BB18
      end
  }
  BB18 {
    _32 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_20));
    node_20 <- { node_20 with current = (let Type.RedBlackTree_Node a b c d e =  * node_20 in Type.RedBlackTree_Node a b c d ( ^ _32)) };
    assume { Resolve3.resolve _33 };
    _33 <- key_2;
    assume { Resolve4.resolve _34 };
    _34 <- val'_3;
    _21 <- ([#"../red_black_tree.rs" 237 31 62] insert_rec _32 _33 _34);
    goto BB25
  }
  BB19 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve val'_3 };
    assume { Resolve7.resolve node_20 };
    absurd
  }
  BB20 {
    _27 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_20));
    node_20 <- { node_20 with current = (let Type.RedBlackTree_Node a b c d e =  * node_20 in Type.RedBlackTree_Node ( ^ _27) b c d e) };
    assume { Resolve3.resolve _28 };
    _28 <- key_2;
    assume { Resolve4.resolve _29 };
    _29 <- val'_3;
    _21 <- ([#"../red_black_tree.rs" 232 28 58] insert_rec _27 _28 _29);
    goto BB21
  }
  BB21 {
    goto BB26
  }
  BB22 {
    assume { Resolve4.resolve _31 };
    _31 <- val'_3;
    assume { Resolve4.resolve (Type.redblacktree_node_Node_val ( * node_20)) };
    node_20 <- { node_20 with current = (let Type.RedBlackTree_Node a b c d e =  * node_20 in Type.RedBlackTree_Node a b c _31 e) };
    goto BB23
  }
  BB23 {
    assume { Resolve7.resolve node_20 };
    goto BB24
  }
  BB24 {
    _0 <- ();
    goto BB29
  }
  BB25 {
    goto BB26
  }
  BB26 {
    assert { [#"../red_black_tree.rs" 239 16 94] forall h : (int) . HasHeight0.has_height (Model1.model old_self_4) h -> HasHeight1.has_height ( * node_20) h };
    _35 <- ();
    _37 <- borrow_mut ( * node_20);
    node_20 <- { node_20 with current = ( ^ _37) };
    _36 <- ([#"../red_black_tree.rs" 241 16 39] InsertRebalance0.insert_rebalance _37);
    goto BB27
  }
  BB27 {
    assume { Resolve7.resolve node_20 };
    _0 <- ();
    goto BB28
  }
  BB28 {
    goto BB31
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    return _0
  }
  
end
module RedBlackTree_Impl4_ModelAccHasBinding_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_binding (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl4_ModelAccHasBinding
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_binding [#"../red_black_tree.rs" 449 4 81] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 449 4 81] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = model_acc_has_binding left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc_has_binding right accu2 k
      end
  axiom model_acc_has_binding_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . [#"../red_black_tree.rs" 447 4 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl4_ModelAccHasBinding_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_binding (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    ensures { [#"../red_black_tree.rs" 447 4 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v) }
    
   =
    [#"../red_black_tree.rs" 449 4 81] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = model_acc_has_binding left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in model_acc_has_binding right accu2 k
      end
end
module RedBlackTree_Impl4_HasBindingModelAcc_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  function has_binding_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl4_HasBindingModelAcc
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_ModelAccHasBinding_Interface as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_binding_model_acc [#"../red_black_tree.rs" 466 4 29] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 466 4 29] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = has_binding_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in let _ = has_binding_model_acc right accu2 k in ModelAccHasBinding0.model_acc_has_binding right accu2 k
      end
  axiom has_binding_model_acc_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 464 4 37] OrdInvariant0.ord_invariant self) -> ([#"../red_black_tree.rs" 465 4 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl4_HasBindingModelAcc_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_ModelAccHasBinding as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  let rec ghost function has_binding_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 464 4 37] OrdInvariant0.ord_invariant self}
    ensures { [#"../red_black_tree.rs" 465 4 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v }
    
   =
    [#"../red_black_tree.rs" 466 4 29] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color key val' right)) -> let _ = has_binding_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = has_binding_model_acc right accu2 k in ModelAccHasBinding0.model_acc_has_binding right accu2 k
      end
end
module RedBlackTree_Impl4_HasBindingModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  function has_binding_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) : ()
end
module RedBlackTree_Impl4_HasBindingModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_ModelAccHasBinding_Interface as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl4_HasBindingModelAcc_Interface as HasBindingModelAcc0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_binding_model [#"../red_black_tree.rs" 487 4 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) : ()
    
   =
    [#"../red_black_tree.rs" 487 4 29] let _ = ModelAccHasBinding0.model_acc_has_binding self (Const.const (Type.Core_Option_Option_None)) k in HasBindingModelAcc0.has_binding_model_acc self (Const.const (Type.Core_Option_Option_None)) k
  axiom has_binding_model_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy, v : v . ([#"../red_black_tree.rs" 485 4 37] OrdInvariant0.ord_invariant self) -> ([#"../red_black_tree.rs" 486 4 69] HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v))
end
module RedBlackTree_Impl4_HasBindingModel_Impl
  type k
  type v
  use map.Map
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_ModelAccHasBinding as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_HasBindingModelAcc as HasBindingModelAcc0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding, axiom .
  let rec ghost function has_binding_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v) : ()
    requires {[#"../red_black_tree.rs" 485 4 37] OrdInvariant0.ord_invariant self}
    ensures { [#"../red_black_tree.rs" 486 4 69] HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v) }
    
   =
    [#"../red_black_tree.rs" 487 4 29] let _ = ModelAccHasBinding0.model_acc_has_binding self (Const.const (Type.Core_Option_Option_None)) k in HasBindingModelAcc0.has_binding_model_acc self (Const.const (Type.Core_Option_Option_None)) k
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsMut
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl1_Insert_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 246 4 36] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 248 4 55] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { [#"../red_black_tree.rs" 247 4 35] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl1_Insert
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl4_ModelAccHasBinding as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_HasBindingModelAcc as HasBindingModelAcc0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding, axiom .
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_HasBindingModel as HasBindingModel0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding,
  function HasBindingModelAcc0.has_binding_model_acc = HasBindingModelAcc0.has_binding_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl4_HasHeight as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_Invariant as Invariant0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = Type.redblacktree_tree k v,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl1_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 249 4 15] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 246 4 36] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 248 4 55] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { [#"../red_black_tree.rs" 247 4 35] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (Type.redblacktree_tree k v);
  var _5 : Type.redblacktree_tree k v;
  var _6 : Type.redblacktree_tree k v;
  var _7 : ();
  var _8 : borrowed (Type.redblacktree_tree k v);
  var _9 : k;
  var _10 : v;
  var _11 : Type.redblacktree_color;
  var _12 : borrowed (Type.redblacktree_node k v);
  var _13 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _14 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _15 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <-  * self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_self_4 <- ([#"../red_black_tree.rs" 253 23 44] Record0.record _5);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve old_self_4 };
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    assume { Resolve2.resolve _9 };
    _9 <- key_2;
    assume { Resolve3.resolve _10 };
    _10 <- val'_3;
    _7 <- ([#"../red_black_tree.rs" 254 8 33] InsertRec0.insert_rec _8 _9 _10);
    goto BB3
  }
  BB3 {
    _11 <- Type.RedBlackTree_Color_Black;
    _14 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _14)) };
    _13 <- ([#"../red_black_tree.rs" 255 8 26] AsMut0.as_mut _14);
    goto BB4
  }
  BB4 {
    assume { Resolve4.resolve self_1 };
    _12 <- ([#"../red_black_tree.rs" 255 8 35] Unwrap0.unwrap _13);
    goto BB5
  }
  BB5 {
    _12 <- { _12 with current = (let Type.RedBlackTree_Node a b c d e =  * _12 in Type.RedBlackTree_Node a _11 c d e) };
    assume { Resolve5.resolve _12 };
    assert { [#"../red_black_tree.rs" 256 8 58] forall h : (int) . HasHeight0.has_height (Model2.model old_self_4) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h + 1) };
    _15 <- ();
    assert { [#"../red_black_tree.rs" 258 8 92] let _ = HasBindingModel0.has_binding_model ( * self_1) (Model1.model key_2) val'_3 in true };
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module RedBlackTree_Impl1_GetRec_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  val get_rec [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 261 4 40] OrdInvariant0.ord_invariant self}
    ensures { [#"../red_black_tree.rs" 263 4 78] result = Type.Core_Option_Option_None -> (forall v : (v) . not HasMapping0.has_mapping self (Model0.model key) v) }
    ensures { [#"../red_black_tree.rs" 262 4 82] forall r : (v) . result = Type.Core_Option_Option_Some r -> HasMapping0.has_mapping self (Model0.model key) r }
    
end
module RedBlackTree_Impl1_GetRec
  type k
  type v
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model1.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get_rec [@cfg:stackify] [#"../red_black_tree.rs" 264 4 15] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 261 4 40] OrdInvariant0.ord_invariant self}
    ensures { [#"../red_black_tree.rs" 263 4 78] result = Type.Core_Option_Option_None -> (forall v : (v) . not HasMapping0.has_mapping self (Model0.model key) v) }
    ensures { [#"../red_black_tree.rs" 262 4 82] forall r : (v) . result = Type.Core_Option_Option_Some r -> HasMapping0.has_mapping self (Model0.model key) r }
    
   =
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  var _4 : isize;
  var node_5 : Type.redblacktree_node k v;
  var _6 : Type.core_cmp_ordering;
  var _7 : k;
  var _8 : k;
  var _9 : k;
  var _10 : int8;
  var _11 : Type.redblacktree_tree k v;
  var _12 : k;
  var _13 : v;
  var _14 : v;
  var _15 : Type.redblacktree_tree k v;
  var _16 : k;
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _3 <- Type.redblacktree_tree_Tree_node self_1;
    assume { Resolve0.resolve self_1 };
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    node_5 <- Type.core_option_option_Some_0 _3;
    assume { Resolve2.resolve _3 };
    _7 <- key_2;
    _9 <- Type.redblacktree_node_Node_key node_5;
    _8 <- _9;
    assume { Resolve1.resolve _9 };
    _6 <- ([#"../red_black_tree.rs" 270 32 50] Cmp0.cmp _7 _8);
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB3 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB4 {
    switch (_6)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB9
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _15 <- Type.redblacktree_node_Node_right node_5;
    assume { Resolve3.resolve node_5 };
    _16 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- ([#"../red_black_tree.rs" 273 27 50] get_rec _15 _16);
    goto BB10
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_5 };
    absurd
  }
  BB7 {
    _11 <- Type.redblacktree_node_Node_left node_5;
    assume { Resolve3.resolve node_5 };
    _12 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- ([#"../red_black_tree.rs" 271 24 46] get_rec _11 _12);
    goto BB8
  }
  BB8 {
    goto BB11
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    _14 <- Type.redblacktree_node_Node_val node_5;
    assume { Resolve3.resolve node_5 };
    _13 <- _14;
    assume { Resolve4.resolve _14 };
    _0 <- Type.Core_Option_Option_Some _13;
    goto BB11
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl1_Get_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 278 4 36] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 280 4 65] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 279 4 86] forall v : (v) . (result = Type.Core_Option_Option_Some v) = (Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v) }
    
end
module RedBlackTree_Impl1_Get
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl4_ModelAccHasBinding as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_HasBindingModelAcc as HasBindingModelAcc0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding, axiom .
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_HasBindingModel as HasBindingModel0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding,
  function HasBindingModelAcc0.has_binding_model_acc = HasBindingModelAcc0.has_binding_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl4_HasHeight as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_Invariant as Invariant0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone RedBlackTree_Impl1_GetRec_Interface as GetRec0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 281 4 15] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 278 4 36] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 280 4 65] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 279 4 86] forall v : (v) . (result = Type.Core_Option_Option_Some v) = (Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v) }
    
   =
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : ();
  var _4 : Type.redblacktree_tree k v;
  var _5 : k;
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assert { [#"../red_black_tree.rs" 285 8 80] forall v : (v) . let _ = HasBindingModel0.has_binding_model self_1 (Model1.model key_2) v in true };
    _3 <- ();
    _4 <- self_1;
    assume { Resolve0.resolve self_1 };
    _5 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- ([#"../red_black_tree.rs" 286 8 25] GetRec0.get_rec _4 _5);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module RedBlackTree_Impl1_GetMutRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl2_IsRedLog_Interface as IsRedLog0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasHeight_Interface as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 289 4 36] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 295 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 294 4 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 293 4 112] result = Type.Core_Option_Option_None -> (forall v : (v) . not HasMapping0.has_mapping ( * self) (Model1.model key) v && not HasMapping0.has_mapping ( ^ self) (Model1.model key) v) }
    ensures { [#"../red_black_tree.rs" 292 4 120] forall r : (borrowed v) . result = Type.Core_Option_Option_Some r -> HasMapping0.has_mapping ( * self) (Model1.model key) ( * r) && HasMapping0.has_mapping ( ^ self) (Model1.model key) ( ^ r) }
    ensures { [#"../red_black_tree.rs" 291 4 60] IsRedLog0.is_red_log ( ^ self) = IsRedLog0.is_red_log ( * self) }
    ensures { [#"../red_black_tree.rs" 290 4 35] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl1_GetMutRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl4_HasHeight as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_Invariant as Invariant0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get_mut_rec [@cfg:stackify] [#"../red_black_tree.rs" 296 4 15] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 289 4 36] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 295 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 294 4 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 293 4 112] result = Type.Core_Option_Option_None -> (forall v : (v) . not HasMapping0.has_mapping ( * self) (Model1.model key) v && not HasMapping0.has_mapping ( ^ self) (Model1.model key) v) }
    ensures { [#"../red_black_tree.rs" 292 4 120] forall r : (borrowed v) . result = Type.Core_Option_Option_Some r -> HasMapping0.has_mapping ( * self) (Model1.model key) ( * r) && HasMapping0.has_mapping ( ^ self) (Model1.model key) ( ^ r) }
    ensures { [#"../red_black_tree.rs" 291 4 60] IsRedLog0.is_red_log ( ^ self) = IsRedLog0.is_red_log ( * self) }
    ensures { [#"../red_black_tree.rs" 290 4 35] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _4 : isize;
  var node_5 : borrowed (Type.redblacktree_node k v);
  var _6 : Type.core_cmp_ordering;
  var _7 : k;
  var _8 : k;
  var _9 : k;
  var _10 : int8;
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : k;
  var _13 : borrowed v;
  var _14 : borrowed v;
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : k;
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _3)) };
    assume { Resolve0.resolve self_1 };
    switch ( * _3)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    node_5 <- borrow_mut (Type.core_option_option_Some_0 ( * _3));
    _3 <- { _3 with current = (let Type.Core_Option_Option_Some a =  * _3 in Type.Core_Option_Option_Some ( ^ node_5)) };
    assume { Resolve2.resolve _3 };
    _7 <- key_2;
    _9 <- Type.redblacktree_node_Node_key ( * node_5);
    _8 <- _9;
    assume { Resolve1.resolve _9 };
    _6 <- ([#"../red_black_tree.rs" 302 32 50] Cmp0.cmp _7 _8);
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB3 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB4 {
    switch (_6)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB9
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _15 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node a b c d ( ^ _15)) };
    _16 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- ([#"../red_black_tree.rs" 305 27 54] get_mut_rec _15 _16);
    goto BB10
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_5 };
    absurd
  }
  BB7 {
    _11 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node ( ^ _11) b c d e) };
    _12 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- ([#"../red_black_tree.rs" 303 24 50] get_mut_rec _11 _12);
    goto BB8
  }
  BB8 {
    assume { Resolve3.resolve node_5 };
    goto BB11
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    _14 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node a b c ( ^ _14) e) };
    assume { Resolve3.resolve node_5 };
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _0 <- Type.Core_Option_Option_Some _13;
    assume { Resolve4.resolve _14 };
    goto BB11
  }
  BB10 {
    assume { Resolve3.resolve node_5 };
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl1_GetMut_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 310 4 36] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 314 4 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { [#"../red_black_tree.rs" 312 4 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 311 4 35] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl1_GetMut
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone RedBlackTree_Impl2_IsRedLog as IsRedLog0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  clone RedBlackTree_Impl1_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl4_ModelAccHasBinding as ModelAccHasBinding0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_HasBindingModelAcc as HasBindingModelAcc0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding, axiom .
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_HasBindingModel as HasBindingModel0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasBinding0.model_acc_has_binding = ModelAccHasBinding0.model_acc_has_binding,
  function HasBindingModelAcc0.has_binding_model_acc = HasBindingModelAcc0.has_binding_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl4_HasHeight as HasHeight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_Invariant as Invariant0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = k
  clone RedBlackTree_Impl1_GetMutRec_Interface as GetMutRec0 with type k = k, type v = v,
  predicate Invariant0.invariant' = Invariant0.invariant', predicate HasHeight0.has_height = HasHeight0.has_height,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model2.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model1.model = Model1.model,
  predicate IsRedLog0.is_red_log = IsRedLog0.is_red_log
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 315 4 15] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 310 4 36] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 314 4 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { [#"../red_black_tree.rs" 312 4 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 311 4 35] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : ();
  var _4 : borrowed (Type.redblacktree_tree k v);
  var _5 : k;
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assert { [#"../red_black_tree.rs" 319 8 80] forall v : (v) . let _ = HasBindingModel0.has_binding_model ( * self_1) (Model1.model key_2) v in true };
    _3 <- ();
    _4 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _4) };
    _5 <- key_2;
    assume { Resolve0.resolve key_2 };
    _0 <- ([#"../red_black_tree.rs" 320 8 29] GetMutRec0.get_mut_rec _4 _5);
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module RedBlackTree_Impl5_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl5_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl4_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 502 4 35] (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 502 4 35] ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module RedBlackTree_Impl7
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.redblacktree_color
  clone RedBlackTree_Impl7_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl8
  
end
module RedBlackTree_Impl5_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl5
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl4_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl6_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl5_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
