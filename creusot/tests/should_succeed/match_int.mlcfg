module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module MatchInt_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module MatchInt_Main
  use mach.int.Int
  use mach.int.Int32
  let rec cfg main [@cfg:stackify] [#"../match_int.rs" 3 0 9] (_ : ()) : () =
  var _0 : ();
  var _1 : int32;
  var _2 : bool;
  var _3 : bool;
  var _4 : bool;
  var _5 : ();
  var _6 : bool;
  var _7 : ();
  var _8 : bool;
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    _1 <- (1 : int32);
    _2 <- ([#"../match_int.rs" 5 8 13] (0 : int32) <= _1);
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _3 <- ([#"../match_int.rs" 5 8 13] _1 < (10 : int32));
    switch (_3)
      | False -> goto BB2
      | _ -> goto BB4
      end
  }
  BB2 {
    switch (_1 = 5)
      | True -> goto BB7
      | False -> switch (_1 = 6)
        | True -> goto BB7
        | False -> goto BB3
        end
      end
  }
  BB3 {
    _8 <- not false;
    switch (_8)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB4 {
    _4 <- not true;
    switch (_4)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _0 <- ();
    goto BB12
  }
  BB7 {
    _6 <- not false;
    switch (_6)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _0 <- ();
    goto BB12
  }
  BB10 {
    absurd
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
