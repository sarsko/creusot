module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type incsomelist_list  =
    | IncSomeList_List_Cons uint32 (incsomelist_list)
    | IncSomeList_List_Nil
    
  let function incsomelist_list_Cons_0 (self : incsomelist_list) : uint32 =
    match (self) with
      | IncSomeList_List_Cons a _ -> a
      | IncSomeList_List_Nil -> any uint32
      end
  let function incsomelist_list_Cons_1 (self : incsomelist_list) : incsomelist_list =
    match (self) with
      | IncSomeList_List_Cons _ a -> a
      | IncSomeList_List_Nil -> any incsomelist_list
      end
end
module IncSomeList_Random_Interface
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSomeList_Random
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSomeList_Impl1_Sum_Interface
  use Type
  use mach.int.Int
  function sum (self : Type.incsomelist_list) : int
end
module IncSomeList_Impl1_Sum
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  function sum [#"../inc_some_list.rs" 18 4 23] (self : Type.incsomelist_list) : int =
    [#"../inc_some_list.rs" 18 4 23] match (self) with
      | Type.IncSomeList_List_Cons a l -> UInt32.to_int a + sum l
      | Type.IncSomeList_List_Nil -> 0
      end
end
module IncSomeList_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : Type.incsomelist_list) : ()
end
module IncSomeList_Impl1_LemmaSumNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg [#"../inc_some_list.rs" 28 4 30] (self : Type.incsomelist_list) : ()
  axiom def : forall self : Type.incsomelist_list . lemma_sum_nonneg self = ([#"../inc_some_list.rs" 28 4 30] match (self) with
    | Type.IncSomeList_List_Cons _ l -> lemma_sum_nonneg l
    | Type.IncSomeList_List_Nil -> ()
    end)
  axiom lemma_sum_nonneg_spec : forall self : Type.incsomelist_list . [#"../inc_some_list.rs" 27 4 31] Sum0.sum self >= 0
end
module IncSomeList_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum as Sum0
  let rec ghost function lemma_sum_nonneg (self : Type.incsomelist_list) : ()
    ensures { [#"../inc_some_list.rs" 27 4 31] Sum0.sum self >= 0 }
    variant {[#"../inc_some_list.rs" 26 4 21] self}
    
   =
    [#"../inc_some_list.rs" 28 4 30] match (self) with
      | Type.IncSomeList_List_Cons _ l -> lemma_sum_nonneg l
      | Type.IncSomeList_List_Nil -> ()
      end
end
module IncSomeList_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  val sum_x [@cfg:stackify] (self : Type.incsomelist_list) : uint32
    requires {[#"../inc_some_list.rs" 35 4 40] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_list.rs" 36 4 37] UInt32.to_int result = Sum0.sum self }
    
end
module IncSomeList_Impl1_SumX
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum as Sum0
  use mach.int.Int64
  let rec cfg sum_x [@cfg:stackify] [#"../inc_some_list.rs" 37 4 26] (self : Type.incsomelist_list) : uint32
    requires {[#"../inc_some_list.rs" 35 4 40] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_list.rs" 36 4 37] UInt32.to_int result = Sum0.sum self }
    
   =
  var _0 : uint32;
  var self_1 : Type.incsomelist_list;
  var _2 : isize;
  var a_3 : uint32;
  var l_4 : Type.incsomelist_list;
  var _5 : uint32;
  var _6 : uint32;
  var _7 : Type.incsomelist_list;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB3
      | Type.IncSomeList_List_Nil -> goto BB1
      end
  }
  BB1 {
    _0 <- (0 : uint32);
    goto BB5
  }
  BB2 {
    absurd
  }
  BB3 {
    a_3 <- Type.incsomelist_list_Cons_0 self_1;
    l_4 <- Type.incsomelist_list_Cons_1 self_1;
    _5 <- a_3;
    _7 <- l_4;
    _6 <- ([#"../inc_some_list.rs" 39 31 40] sum_x _7);
    goto BB4
  }
  BB4 {
    _0 <- ([#"../inc_some_list.rs" 39 26 40] _5 + _6);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Int_Impl12_ModelTy
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = borrowed t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Int_Impl12_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl12_Model
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int =
    UInt32.to_int self
end
module CreusotContracts_Logic_Int_Impl12
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl12_Model as Model0
  clone CreusotContracts_Logic_Int_Impl12_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = uint32,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = uint32, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module IncSomeList_Impl1_TakeSome_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  clone CreusotContracts_Logic_Int_Impl12_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val take_some [@cfg:stackify] (self : borrowed (Type.incsomelist_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 45 4 37] Model0.model result <= Sum0.sum ( * self) }
    ensures { [#"../inc_some_list.rs" 44 4 64] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - Model0.model result }
    
end
module IncSomeList_Impl1_TakeSome
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use Type
  clone IncSomeList_Impl1_Sum as Sum0
  clone IncSomeList_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  clone CreusotContracts_Logic_Int_Impl12_Model as Model1
  clone CreusotContracts_Logic_Int_Impl12_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.incsomelist_list
  clone IncSomeList_Random_Interface as Random0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.incsomelist_list
  let rec cfg take_some [@cfg:stackify] [#"../inc_some_list.rs" 46 4 39] (self : borrowed (Type.incsomelist_list)) : borrowed uint32
    ensures { [#"../inc_some_list.rs" 45 4 37] Model0.model result <= Sum0.sum ( * self) }
    ensures { [#"../inc_some_list.rs" 44 4 64] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - Model0.model result }
    
   =
  var _0 : borrowed uint32;
  var self_1 : borrowed (Type.incsomelist_list);
  var _2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : isize;
  var ma_5 : borrowed uint32;
  var ml_6 : borrowed (Type.incsomelist_list);
  var _7 : borrowed uint32;
  var _8 : ();
  var _9 : borrowed uint32;
  var _10 : bool;
  var _11 : borrowed uint32;
  var _12 : borrowed uint32;
  var _13 : borrowed (Type.incsomelist_list);
  var _14 : ();
  var _15 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Type.IncSomeList_List_Cons _ _ -> goto BB3
      | Type.IncSomeList_List_Nil -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    goto BB9
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    ma_5 <- borrow_mut (Type.incsomelist_list_Cons_0 ( * self_1));
    self_1 <- { self_1 with current = (let Type.IncSomeList_List_Cons a b =  * self_1 in Type.IncSomeList_List_Cons ( ^ ma_5) b) };
    ml_6 <- borrow_mut (Type.incsomelist_list_Cons_1 ( * self_1));
    self_1 <- { self_1 with current = (let Type.IncSomeList_List_Cons a b =  * self_1 in Type.IncSomeList_List_Cons a ( ^ ml_6)) };
    assume { Resolve0.resolve self_1 };
    assert { [#"../inc_some_list.rs" 49 16 61] let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * ml_6) in true };
    _8 <- ();
    _10 <- ([#"../inc_some_list.rs" 50 19 27] Random0.random ());
    goto BB4
  }
  BB4 {
    switch (_10)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve1.resolve ml_6 };
    _11 <- borrow_mut ( * ma_5);
    ma_5 <- { ma_5 with current = ( ^ _11) };
    assume { Resolve2.resolve ma_5 };
    _9 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _9) };
    assume { Resolve2.resolve _11 };
    goto BB8
  }
  BB6 {
    assume { Resolve2.resolve ma_5 };
    _13 <- borrow_mut ( * ml_6);
    ml_6 <- { ml_6 with current = ( ^ _13) };
    _12 <- ([#"../inc_some_list.rs" 53 20 34] take_some _13);
    goto BB7
  }
  BB7 {
    assume { Resolve1.resolve ml_6 };
    _9 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _9) };
    assume { Resolve2.resolve _12 };
    goto BB8
  }
  BB8 {
    _7 <- borrow_mut ( * _9);
    _9 <- { _9 with current = ( ^ _7) };
    assume { Resolve2.resolve _9 };
    _3 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _3) };
    assume { Resolve2.resolve _7 };
    _2 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _2) };
    assume { Resolve2.resolve _3 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve2.resolve _2 };
    return _0
  }
  BB9 {
    _15 <- ();
    goto BB9
  }
  
end
module IncSomeList_IncSomeList_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone IncSomeList_Impl1_Sum_Interface as Sum0
  val inc_some_list [@cfg:stackify] (l : Type.incsomelist_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 61 0 38] Sum0.sum l + UInt32.to_int k <= 1000000}
    
end
module IncSomeList_IncSomeList
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone IncSomeList_Impl1_Sum as Sum0
  use prelude.Prelude
  clone CreusotContracts_Logic_Int_Impl12_Model as Model1
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone CreusotContracts_Logic_Int_Impl12_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone IncSomeList_Impl1_TakeSome_Interface as TakeSome0 with function Model0.model = Model0.model,
  function Sum0.sum = Sum0.sum
  clone IncSomeList_Impl1_SumX_Interface as SumX0 with function Sum0.sum = Sum0.sum
  let rec cfg inc_some_list [@cfg:stackify] [#"../inc_some_list.rs" 62 0 37] (l : Type.incsomelist_list) (k : uint32) : ()
    requires {[#"../inc_some_list.rs" 61 0 38] Sum0.sum l + UInt32.to_int k <= 1000000}
    
   =
  var _0 : ();
  var l_1 : Type.incsomelist_list;
  var k_2 : uint32;
  var sum0_3 : uint32;
  var _4 : Type.incsomelist_list;
  var ma_5 : borrowed uint32;
  var _6 : borrowed (Type.incsomelist_list);
  var _7 : uint32;
  var _8 : ();
  var _9 : bool;
  var _10 : bool;
  var _11 : uint32;
  var _12 : Type.incsomelist_list;
  var _13 : uint32;
  var _14 : uint32;
  var _15 : uint32;
  var _16 : ();
  {
    l_1 <- l;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- l_1;
    sum0_3 <- ([#"../inc_some_list.rs" 63 15 24] SumX0.sum_x _4);
    goto BB2
  }
  BB2 {
    _6 <- borrow_mut l_1;
    l_1 <-  ^ _6;
    ma_5 <- ([#"../inc_some_list.rs" 64 13 26] TakeSome0.take_some _6);
    goto BB3
  }
  BB3 {
    _7 <- k_2;
    ma_5 <- { ma_5 with current = ([#"../inc_some_list.rs" 65 4 12]  * ma_5 + _7) };
    assume { Resolve0.resolve ma_5 };
    _12 <- l_1;
    _11 <- ([#"../inc_some_list.rs" 66 12 21] SumX0.sum_x _12);
    goto BB4
  }
  BB4 {
    _14 <- sum0_3;
    _15 <- k_2;
    _13 <- ([#"../inc_some_list.rs" 66 25 33] _14 + _15);
    _10 <- ([#"../inc_some_list.rs" 66 12 33] _11 = _13);
    _9 <- not _10;
    switch (_9)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _8 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSomeList_Impl0
  
end
