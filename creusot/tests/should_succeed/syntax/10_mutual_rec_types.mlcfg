module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type c10mutualrectypes_node  =
    | C10MutualRecTypes_Node (c10mutualrectypes_tree) uint32 (c10mutualrectypes_tree)
    with c10mutualrectypes_tree  =
    | C10MutualRecTypes_Tree (core_option_option (c10mutualrectypes_node))
    
  let function c10mutualrectypes_tree_Tree_0 (self : c10mutualrectypes_tree) : core_option_option (c10mutualrectypes_node)
    
   =
    match (self) with
      | C10MutualRecTypes_Tree a -> a
      end
  let function c10mutualrectypes_node_Node_left (self : c10mutualrectypes_node) : c10mutualrectypes_tree =
    match (self) with
      | C10MutualRecTypes_Node a _ _ -> a
      end
  let function c10mutualrectypes_node_Node_right (self : c10mutualrectypes_node) : c10mutualrectypes_tree =
    match (self) with
      | C10MutualRecTypes_Node _ _ a -> a
      end
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
end
module C10MutualRecTypes_UseTree_Interface
  use prelude.Prelude
  use Type
  val use_tree [@cfg:stackify] (t : Type.c10mutualrectypes_tree) : ()
end
module C10MutualRecTypes_UseTree
  use prelude.Prelude
  use Type
  let rec cfg use_tree [@cfg:stackify] [#"../10_mutual_rec_types.rs" 10 0 21] (t : Type.c10mutualrectypes_tree) : () =
  var _0 : ();
  var t_1 : Type.c10mutualrectypes_tree;
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    requires {false}
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    requires {false}
    
end
module Core_Cmp_Ord_Max_Interface
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Max
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module C10MutualRecTypes_Impl0_Height_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  val height [@cfg:stackify] (self : Type.c10mutualrectypes_tree) : uint64
end
module C10MutualRecTypes_Impl0_Height
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int64
  clone Core_Cmp_Ord_Max_Interface as Max0 with type self = uint64
  let rec cfg height [@cfg:stackify] [#"../10_mutual_rec_types.rs" 13 4 27] (self : Type.c10mutualrectypes_tree) : uint64
    
   =
  var _0 : uint64;
  var self_1 : Type.c10mutualrectypes_tree;
  var _2 : isize;
  var n_3 : Type.c10mutualrectypes_node;
  var _4 : uint64;
  var _5 : uint64;
  var _6 : Type.c10mutualrectypes_tree;
  var _7 : uint64;
  var _8 : Type.c10mutualrectypes_tree;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.c10mutualrectypes_tree_Tree_0 self_1)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    n_3 <- Type.core_option_option_Some_0 (Type.c10mutualrectypes_tree_Tree_0 self_1);
    _6 <- Type.c10mutualrectypes_node_Node_left n_3;
    _5 <- ([#"../10_mutual_rec_types.rs" 16 29 44] height _6);
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- (0 : uint64);
    goto BB7
  }
  BB4 {
    _8 <- Type.c10mutualrectypes_node_Node_right n_3;
    _7 <- ([#"../10_mutual_rec_types.rs" 16 49 65] height _8);
    goto BB5
  }
  BB5 {
    _4 <- ([#"../10_mutual_rec_types.rs" 16 29 66] Max0.max _5 _7);
    goto BB6
  }
  BB6 {
    _0 <- ([#"../10_mutual_rec_types.rs" 16 29 70] _4 + (1 : uint64));
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
