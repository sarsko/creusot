module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module Mc91_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Mc91_Main
  let rec cfg main [@cfg:stackify] [#"../mc91.rs" 15 0 9] (_ : ()) : () =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Mc91_Mc91_Interface
  use mach.int.Int
  use mach.int.UInt32
  val mc91 [@cfg:stackify] (x : uint32) : uint32
    ensures { [#"../mc91.rs" 5 0 40] x <= (100 : uint32) -> result = (91 : uint32) && x > (100 : uint32) -> result = x - (10 : uint32) }
    
end
module Mc91_Mc91
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg mc91 [@cfg:stackify] [#"../mc91.rs" 7 0 22] (x : uint32) : uint32
    ensures { [#"../mc91.rs" 5 0 40] x <= (100 : uint32) -> result = (91 : uint32) && x > (100 : uint32) -> result = x - (10 : uint32) }
    
   =
  var _0 : uint32;
  var x_1 : uint32;
  var _2 : bool;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : uint32;
  var _6 : uint32;
  var _7 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _2 <- ([#"../mc91.rs" 8 7 14] _3 > (100 : uint32));
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _4 <- x_1;
    _0 <- ([#"../mc91.rs" 9 8 14] _4 - (10 : uint32));
    goto BB5
  }
  BB2 {
    _7 <- x_1;
    _6 <- ([#"../mc91.rs" 11 18 24] _7 + (11 : uint32));
    _5 <- ([#"../mc91.rs" 11 13 25] mc91 _6);
    goto BB3
  }
  BB3 {
    _0 <- ([#"../mc91.rs" 11 8 26] mc91 _5);
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
