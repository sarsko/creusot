module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module Division_Divide_Interface
  use mach.int.Int
  use mach.int.UInt32
  val divide [@cfg:stackify] (y : uint32) (x : uint32) : uint32
    requires {[#"../division.rs" 5 0 22] x <> (0 : uint32)}
    
end
module Division_Divide
  use mach.int.Int
  use mach.int.UInt32
  let rec cfg divide [@cfg:stackify] [#"../division.rs" 6 0 32] (y : uint32) (x : uint32) : uint32
    requires {[#"../division.rs" 5 0 22] x <> (0 : uint32)}
    
   =
  var _0 : uint32;
  var y_1 : uint32;
  var x_2 : uint32;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    y_1 <- y;
    x_2 <- x;
    goto BB0
  }
  BB0 {
    _3 <- y_1;
    _4 <- x_2;
    _5 <- ([#"../division.rs" 7 4 9] _4 = (0 : uint32));
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../division.rs" 7 4 9] _3 / _4);
    return _0
  }
  
end
