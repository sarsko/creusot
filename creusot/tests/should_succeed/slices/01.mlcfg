module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.Int64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . Seq.length (model self) <= 9223372036854775807 && model self = Prelude.id self
end
module CreusotContracts_Std1_Slice_Impl0
  type t
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model0 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = seq t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = seq t, type modelTy = ModelTy0.modelTy
end
module C01_IndexSlice_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt32
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index_slice [@cfg:stackify] (a : seq uint32) : uint32
    requires {[#"../01.rs" 5 0 28] 10 < Seq.length (Model0.model a)}
    
end
module C01_IndexSlice
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use mach.int.UInt32
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  let rec cfg index_slice [@cfg:stackify] [#"../01.rs" 6 0 32] (a : seq uint32) : uint32
    requires {[#"../01.rs" 5 0 28] 10 < Seq.length (Model0.model a)}
    
   =
  var _0 : uint32;
  var a_1 : seq uint32;
  var _2 : usize;
  var _3 : usize;
  var _4 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- (10 : usize);
    _3 <- UInt64.of_int (Seq.length a_1);
    _4 <- ([#"../01.rs" 7 4 9] _2 < _3);
    assert { _4 };
    goto BB1
  }
  BB1 {
    _0 <- Seq.get a_1 (UInt64.to_int _2);
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = borrowed t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module C01_IndexMutSlice_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index_mut_slice [@cfg:stackify] (a : borrowed (seq uint32)) : ()
    requires {[#"../01.rs" 10 0 28] Seq.length (Model0.model a) = 5}
    ensures { [#"../01.rs" 11 0 28] UInt32.to_int (Seq.get (Model1.model ( ^ a)) 2) = 3 }
    
end
module C01_IndexMutSlice
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq uint32
  let rec cfg index_mut_slice [@cfg:stackify] [#"../01.rs" 12 0 33] (a : borrowed (seq uint32)) : ()
    requires {[#"../01.rs" 10 0 28] Seq.length (Model0.model a) = 5}
    ensures { [#"../01.rs" 11 0 28] UInt32.to_int (Seq.get (Model1.model ( ^ a)) 2) = 3 }
    
   =
  var _0 : ();
  var a_1 : borrowed (seq uint32);
  var _2 : usize;
  var _3 : usize;
  var _4 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- (2 : usize);
    _3 <- UInt64.of_int (Seq.length ( * a_1));
    _4 <- ([#"../01.rs" 13 4 8] _2 < _3);
    assert { _4 };
    goto BB1
  }
  BB1 {
    a_1 <- { a_1 with current = Seq.set ( * a_1) (UInt64.to_int _2) (3 : uint32) };
    assume { Resolve0.resolve a_1 };
    _0 <- ();
    return _0
  }
  
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Core_Slice_Impl0_Len
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module C01_SliceFirst_Interface
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val slice_first [@cfg:stackify] (a : seq t) : Type.core_option_option t
    ensures { [#"../01.rs" 16 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> v = Seq.get (Model0.model a) 0
      | Type.Core_Option_Option_None -> Seq.length (Model0.model a) = 0
      end }
    
end
module C01_SliceFirst
  type t
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = seq t
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = t, function Model0.model = Model0.model
  let rec cfg slice_first [@cfg:stackify] [#"../01.rs" 20 0 40] (a : seq t) : Type.core_option_option t
    ensures { [#"../01.rs" 16 0 3] match (result) with
      | Type.Core_Option_Option_Some v -> v = Seq.get (Model0.model a) 0
      | Type.Core_Option_Option_None -> Seq.length (Model0.model a) = 0
      end }
    
   =
  var _0 : Type.core_option_option t;
  var a_1 : seq t;
  var _2 : bool;
  var _3 : usize;
  var _4 : seq t;
  var _5 : t;
  var _6 : t;
  var _7 : usize;
  var _8 : usize;
  var _9 : bool;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _4 <- a_1;
    _3 <- ([#"../01.rs" 21 7 14] Len0.len _4);
    goto BB1
  }
  BB1 {
    _2 <- ([#"../01.rs" 21 7 18] _3 > (0 : usize));
    switch (_2)
      | False -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    _7 <- (0 : usize);
    _8 <- UInt64.of_int (Seq.length a_1);
    _9 <- ([#"../01.rs" 22 14 18] _7 < _8);
    assert { _9 };
    goto BB3
  }
  BB3 {
    _6 <- Seq.get a_1 (UInt64.to_int _7);
    assume { Resolve0.resolve a_1 };
    _5 <- _6;
    assume { Resolve1.resolve _6 };
    _0 <- Type.Core_Option_Option_Some _5;
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve a_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
