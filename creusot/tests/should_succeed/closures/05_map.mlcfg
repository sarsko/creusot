module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type c05map_map 'i 'f =
    | C05Map_Map 'i 'f
    
  let function c05map_map_Map_iter (self : c05map_map 'i 'f) : 'i =
    match (self) with
      | C05Map_Map a _ -> a
      end
  let function c05map_map_Map_func (self : c05map_map 'i 'f) : 'f =
    match (self) with
      | C05Map_Map _ a -> a
      end
end
module C05Map_FakeIterator_Item
  type self
  type item
end
module C05Map_FakeIterator_Next_Interface
  type self
  use prelude.Prelude
  use Type
  clone C05Map_FakeIterator_Item as Item0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
end
module C05Map_FakeIterator_Next
  type self
  use prelude.Prelude
  use Type
  clone C05Map_FakeIterator_Item as Item0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Type.core_option_option Item0.item
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module C05Map_Impl0_Next_Interface
  type a
  type b
  type f
  type i
  use prelude.Prelude
  use Type
  val next [@cfg:stackify] (self : borrowed (Type.c05map_map i f)) : Type.core_option_option b
end
module C05Map_Impl0_Next
  type a
  type b
  type f
  type i
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with type self = f, type args = (a), type Output0.output = b
  clone C05Map_FakeIterator_Next_Interface as Next0 with type self = i, type Item0.item = a
  let rec cfg next [@cfg:stackify] [#"../05_map.rs" 15 4 44] (self : borrowed (Type.c05map_map i f)) : Type.core_option_option b
    
   =
  var _0 : Type.core_option_option b;
  var self_1 : borrowed (Type.c05map_map i f);
  var _2 : Type.core_option_option a;
  var _3 : borrowed i;
  var _4 : isize;
  var e_5 : a;
  var _6 : b;
  var _7 : f;
  var _8 : (a);
  var _9 : a;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (Type.c05map_map_Map_iter ( * self_1));
    self_1 <- { self_1 with current = (let Type.C05Map_Map a b =  * self_1 in Type.C05Map_Map ( ^ _3) b) };
    _2 <- ([#"../05_map.rs" 16 14 30] Next0.next _3);
    goto BB1
  }
  BB1 {
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    e_5 <- Type.core_option_option_Some_0 _2;
    _7 <- Type.c05map_map_Map_func ( * self_1);
    _9 <- e_5;
    _8 <- (_9);
    _6 <- ([#"../05_map.rs" 18 28 42] Call0.call _7 _8);
    goto BB5
  }
  BB3 {
    absurd
  }
  BB4 {
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _0 <- Type.Core_Option_Option_Some _6;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C05Map_Impl0_Item
  type a
  type b
  type f
  type i
  type item  =
    b
end
module C05Map_Impl0
  type a
  type b
  type f
  type i
  use Type
  clone C05Map_Impl0_Next_Interface as Next0 with type a = a, type b = b, type f = f, type i = i
  clone C05Map_Impl0_Item as Item0 with type a = a, type b = b, type f = f, type i = i
  clone C05Map_FakeIterator_Next_Interface as Next1 with type self = Type.c05map_map i f, val next = Next0.next,
  type Item0.item = Item0.item
  clone C05Map_FakeIterator_Item as Item1 with type self = Type.c05map_map i f, type item = Item0.item
end
