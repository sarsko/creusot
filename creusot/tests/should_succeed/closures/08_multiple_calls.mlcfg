module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module C08MultipleCalls_MultiUse_Closure1_Interface
  type t
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  type c08multiplecalls_multiuse_closure1  =
    | C08MultipleCalls_MultiUse_Closure1 t
    
  let function c08multiplecalls_multiuse_closure1_0 (self : c08multiplecalls_multiuse_closure1) : t =
    match (self) with
      | C08MultipleCalls_MultiUse_Closure1 a -> a
      end
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  predicate precondition [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure1) (_2' : ()) =
    [#"../08_multiple_calls.rs" 6 12 31] c08multiplecalls_multiuse_closure1_0 _1' = c08multiplecalls_multiuse_closure1_0 _1'
  predicate postcondition [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure1) (_2' : ()) (result : uint32) =
    true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c08multiplecalls_multiuse_closure1) (_2' : ()) (result : uint32)
    
   =
    true && true
  predicate postcondition_once [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure1) (_2' : ()) (result : uint32) =
    true
  predicate resolve (_1' : c08multiplecalls_multiuse_closure1) =
    Resolve0.resolve (c08multiplecalls_multiuse_closure1_0 _1') && true
  val c08MultipleCalls_MultiUse_Closure1 [@cfg:stackify] (_1' : c08multiplecalls_multiuse_closure1) (_2' : ()) : uint32
    requires {[#"../08_multiple_calls.rs" 6 12 31] c08multiplecalls_multiuse_closure1_0 _1' = c08multiplecalls_multiuse_closure1_0 _1'}
    
end
module C08MultipleCalls_MultiUse_Closure1
  type t
  use prelude.Prelude
  type c08multiplecalls_multiuse_closure1  =
    | C08MultipleCalls_MultiUse_Closure1 t
    
  let function c08multiplecalls_multiuse_closure1_0 (self : c08multiplecalls_multiuse_closure1) : t =
    match (self) with
      | C08MultipleCalls_MultiUse_Closure1 a -> a
      end
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = c08multiplecalls_multiuse_closure1
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg c08MultipleCalls_MultiUse_Closure1 [@cfg:stackify] [#"../08_multiple_calls.rs" 7 4 5] (_1' : c08multiplecalls_multiuse_closure1) (_2' : ()) : uint32
    requires {[#"../08_multiple_calls.rs" 6 12 31] c08multiplecalls_multiuse_closure1_0 _1' = c08multiplecalls_multiuse_closure1_0 _1'}
    
   =
  var _0 : uint32;
  var _1 : c08multiplecalls_multiuse_closure1;
  var _2 : t;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _2 };
    _2 <- c08multiplecalls_multiuse_closure1_0 _1;
    assume { Resolve1.resolve _1 };
    assume { Resolve0.resolve _2 };
    _0 <- (0 : uint32);
    return _0
  }
  
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl2_Postcondition
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition (self : f) (_2' : args) (_3' : Output0.output)
end
module C08MultipleCalls_UsesFn_Interface
  type f
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition_Interface as Postcondition0 with type args = (), type f = f,
  type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = (), type f = f
  val uses_fn [@cfg:stackify] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 18 0 31] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 19 0 70] exists r : (uint32) . exists f2 : (f) . f2 = f && Postcondition0.postcondition f2 () r }
    
end
module C08MultipleCalls_UsesFn
  type f
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Std1_Fun_Impl2_Postcondition as Postcondition0 with type args = (), type f = f,
  type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (), type f = f
  val uses_fn [@cfg:stackify] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 18 0 31] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 19 0 70] exists r : (uint32) . exists f2 : (f) . f2 = f && Postcondition0.postcondition f2 () r }
    
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut
  type args
  type f
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_once (self : self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl0_PostconditionOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl0_PostconditionOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  predicate postcondition_once (self : f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl0
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  clone CreusotContracts_Std1_Fun_Impl0_PostconditionOnce as PostconditionOnce0 with type args = args, type f = f,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce1 with type self = f,
  type args = args, predicate postcondition_once = PostconditionOnce0.postcondition_once,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = args, type f = f
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition1 with type self = f,
  type args = args, predicate precondition = Precondition0.precondition
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce_Interface
  type self
  type args
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = self
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce
  type self
  type args
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = self
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  function fn_mut_once (self : self) (args : args) (res : Output0.output) : ()
  axiom fn_mut_once_spec : forall self : self, args : args, res : Output0.output . PostconditionOnce0.postcondition_once self args res = (exists s : (borrowed self) .  * s = self && PostconditionMut0.postcondition_mut s args res && Resolve0.resolve ( ^ s))
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : () =
    ()
end
module CreusotContracts_Std1_Fun_Impl1
  type args
  type f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = f, type args = args
  clone CreusotContracts_Std1_Fun_Impl0_PostconditionOnce as PostconditionOnce0 with type args = args, type f = f,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = args, type f = f,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = args, type f = f,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnMutSpec_FnMutOnce_Interface as FnMutOnce1 with type self = f, type args = args,
  function fn_mut_once = FnMutOnce0.fn_mut_once,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once,
  predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut,
  predicate Resolve0.resolve = Resolve0.resolve, type Output0.output = Output0.output, axiom .
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut1 with type self = f,
  type args = args, predicate postcondition_mut = PostconditionMut0.postcondition_mut,
  type Output0.output = Output0.output
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module Core_Ops_Function_FnMut_CallMut
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module C08MultipleCalls_UsesFnmut_Interface
  type f
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Interface as PostconditionMut0 with type args = (), type f = f,
  type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = (), type f = f
  val uses_fnmut [@cfg:stackify] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 24 0 31] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 25 0 78] exists r : (uint32) . exists f2 : (borrowed f) .  * f2 = f && PostconditionMut0.postcondition_mut f2 () r }
    
end
module C08MultipleCalls_UsesFnmut
  type f
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (), type f = f,
  type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (), type f = f,
  type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (), type f = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with type self = f, type args = (),
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut, type Output0.output = uint32
  let rec cfg uses_fnmut [@cfg:stackify] [#"../08_multiple_calls.rs" 26 0 42] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 24 0 31] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 25 0 78] exists r : (uint32) . exists f2 : (borrowed f) .  * f2 = f && PostconditionMut0.postcondition_mut f2 () r }
    
   =
  var _0 : ();
  var f_1 : f;
  var _2 : uint32;
  var _3 : borrowed f;
  var _4 : ();
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _3 <- borrow_mut f_1;
    f_1 <-  ^ _3;
    _4 <- ();
    _2 <- ([#"../08_multiple_calls.rs" 27 4 7] CallMut0.call_mut _3 _4);
    goto BB3
  }
  BB3 {
    _0 <- ();
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve f_1 };
    return _0
  }
  
end
module Core_Ops_Function_FnOnce_CallOnce_Interface
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module Core_Ops_Function_FnOnce_CallOnce
  type self
  type args
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnOnceSpec_PostconditionOnce_Interface as PostconditionOnce0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_once [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {Precondition0.precondition self args}
    ensures { PostconditionOnce0.postcondition_once self args result }
    
end
module C08MultipleCalls_UsesFnonce_Interface
  type f
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Std1_Fun_Impl0_PostconditionOnce_Interface as PostconditionOnce0 with type args = (),
  type f = f, type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = (), type f = f
  val uses_fnonce [@cfg:stackify] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 30 0 31] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 31 0 53] exists r : (uint32) . PostconditionOnce0.postcondition_once f () r }
    
end
module C08MultipleCalls_UsesFnonce
  type f
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Std1_Fun_Impl0_PostconditionOnce as PostconditionOnce0 with type args = (), type f = f,
  type Output0.output = uint32
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (), type f = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = f
  clone Core_Ops_Function_FnOnce_CallOnce_Interface as CallOnce0 with type self = f, type args = (),
  predicate Precondition0.precondition = Precondition0.precondition,
  predicate PostconditionOnce0.postcondition_once = PostconditionOnce0.postcondition_once, type Output0.output = uint32
  let rec cfg uses_fnonce [@cfg:stackify] [#"../08_multiple_calls.rs" 32 0 40] (f : f) : ()
    requires {[#"../08_multiple_calls.rs" 30 0 31] Precondition0.precondition f ()}
    ensures { [#"../08_multiple_calls.rs" 31 0 53] exists r : (uint32) . PostconditionOnce0.postcondition_once f () r }
    
   =
  var _0 : ();
  var f_1 : f;
  var _2 : uint32;
  var _3 : f;
  var _4 : ();
  {
    f_1 <- f;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _3 };
    _3 <- f_1;
    _4 <- ();
    _2 <- ([#"../08_multiple_calls.rs" 33 4 7] CallOnce0.call_once _3 _4);
    goto BB3
  }
  BB3 {
    _0 <- ();
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C08MultipleCalls_MultiUse_Interface
  type t
  use prelude.Prelude
  val multi_use [@cfg:stackify] (x : t) : ()
end
module C08MultipleCalls_MultiUse
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone C08MultipleCalls_MultiUse_Closure1_Interface as Closure10 with type t = t,
  predicate Resolve0.resolve = Resolve1.resolve, axiom .
  clone C08MultipleCalls_UsesFnonce_Interface as UsesFnonce0 with type f = Closure10.c08multiplecalls_multiuse_closure1,
  predicate Precondition0.precondition = Closure10.precondition,
  predicate PostconditionOnce0.postcondition_once = Closure10.postcondition_once
  clone C08MultipleCalls_UsesFnmut_Interface as UsesFnmut0 with type f = Closure10.c08multiplecalls_multiuse_closure1,
  predicate Precondition0.precondition = Closure10.precondition,
  predicate PostconditionMut0.postcondition_mut = Closure10.postcondition_mut
  clone C08MultipleCalls_UsesFn_Interface as UsesFn0 with type f = Closure10.c08multiplecalls_multiuse_closure1,
  predicate Precondition0.precondition = Closure10.precondition,
  predicate Postcondition0.postcondition = Closure10.postcondition
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg multi_use [@cfg:stackify] [#"../08_multiple_calls.rs" 5 0 22] (x : t) : () =
  var _0 : ();
  var x_1 : t;
  var c_2 : Closure10.c08multiplecalls_multiuse_closure1;
  var _3 : t;
  var _4 : ();
  var _5 : Closure10.c08multiplecalls_multiuse_closure1;
  var _6 : ();
  var _7 : Closure10.c08multiplecalls_multiuse_closure1;
  var _8 : ();
  var _9 : Closure10.c08multiplecalls_multiuse_closure1;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    c_2 <- Closure10.C08MultipleCalls_MultiUse_Closure1 _3;
    assume { Closure10.resolve _5 };
    _5 <- c_2;
    _4 <- ([#"../08_multiple_calls.rs" 12 4 14] UsesFn0.uses_fn _5);
    goto BB1
  }
  BB1 {
    assume { Closure10.resolve _7 };
    _7 <- c_2;
    _6 <- ([#"../08_multiple_calls.rs" 13 4 17] UsesFnmut0.uses_fnmut _7);
    goto BB2
  }
  BB2 {
    assume { Closure10.resolve _9 };
    _9 <- c_2;
    assume { Closure10.resolve c_2 };
    _8 <- ([#"../08_multiple_calls.rs" 14 4 18] UsesFnonce0.uses_fnonce _9);
    goto BB3
  }
  BB3 {
    _0 <- ();
    return _0
  }
  
end
