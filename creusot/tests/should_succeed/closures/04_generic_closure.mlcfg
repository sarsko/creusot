module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module C04GenericClosure_GenericClosure_Interface
  type a
  type b
  type f
  val generic_closure [@cfg:stackify] (f : f) (a : a) : b
end
module C04GenericClosure_GenericClosure
  type a
  type b
  type f
  use prelude.Prelude
  clone Core_Ops_Function_Fn_Call_Interface as Call0 with type self = f, type args = (a), type Output0.output = b
  let rec cfg generic_closure [@cfg:stackify] [#"../04_generic_closure.rs" 1 0 56] (f : f) (a : a) : b =
  var _0 : b;
  var f_1 : f;
  var a_2 : a;
  var _3 : f;
  var _4 : (a);
  var _5 : a;
  {
    f_1 <- f;
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _3 <- f_1;
    _5 <- a_2;
    _4 <- (_5);
    _0 <- ([#"../04_generic_closure.rs" 2 4 8] Call0.call _3 _4);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module C04GenericClosure_Mapper_Closure0_Interface
  type a
  use prelude.Prelude
  type c04genericclosure_mapper_closure0  =
    | C04GenericClosure_Mapper_Closure0
    
  predicate precondition [@cfg:stackify] (_1' : c04genericclosure_mapper_closure0) (a : (a)) =
    true
  predicate postcondition [@cfg:stackify] (_1' : c04genericclosure_mapper_closure0) (a : (a)) (result : ()) =
    true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c04genericclosure_mapper_closure0) (a : (a)) (result : ())
   =
    true && true
  predicate postcondition_once [@cfg:stackify] (_1' : c04genericclosure_mapper_closure0) (a : (a)) (result : ()) =
    true
  predicate resolve (_1' : c04genericclosure_mapper_closure0) =
    true
  val c04GenericClosure_Mapper_Closure0 [@cfg:stackify] (_1' : c04genericclosure_mapper_closure0) (a : (a)) : ()
end
module C04GenericClosure_Mapper_Closure0
  type a
  type c04genericclosure_mapper_closure0  =
    | C04GenericClosure_Mapper_Closure0
    
  use prelude.Prelude
  let rec cfg c04GenericClosure_Mapper_Closure0 [@cfg:stackify] [#"../04_generic_closure.rs" 6 20 26] (_1' : c04genericclosure_mapper_closure0) (a : (a)) : ()
    
   =
  var _0 : ();
  var _1 : c04genericclosure_mapper_closure0;
  var a_2 : a;
  {
    _1 <- _1';
    a_2 <- a;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C04GenericClosure_Mapper_Interface
  type a
  val mapper [@cfg:stackify] (x : a) : ()
end
module C04GenericClosure_Mapper
  type a
  clone C04GenericClosure_Mapper_Closure0_Interface as Closure00 with type a = a, axiom .
  clone C04GenericClosure_GenericClosure_Interface as GenericClosure0 with type a = a, type b = (),
  type f = Closure00.c04genericclosure_mapper_closure0
  let rec cfg mapper [@cfg:stackify] [#"../04_generic_closure.rs" 5 0 18] (x : a) : () =
  var _0 : ();
  var x_1 : a;
  var _2 : Closure00.c04genericclosure_mapper_closure0;
  var _3 : a;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _2 <- Closure00.C04GenericClosure_Mapper_Closure0;
    _3 <- x_1;
    _0 <- ([#"../04_generic_closure.rs" 6 4 30] GenericClosure0.generic_closure _2 _3);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    return _0
  }
  
end
