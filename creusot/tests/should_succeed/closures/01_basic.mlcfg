module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C01Basic_UsesClosure_Closure0_Interface
  use prelude.Prelude
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
  let function c01basic_usesclosure_closure0_0 (self : c01basic_usesclosure_closure0) : bool =
    match (self) with
      | C01Basic_UsesClosure_Closure0 a -> a
      end
  predicate precondition [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_2' : ()) =
    true
  predicate postcondition [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_2' : ()) (result : bool) =
    true
  predicate postcondition_mut [@cfg:stackify] (_1' : borrowed c01basic_usesclosure_closure0) (_2' : ()) (result : bool)
   =
    true && true
  predicate postcondition_once [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_2' : ()) (result : bool) =
    true
  predicate resolve (_1' : c01basic_usesclosure_closure0) =
    true && true
  val c01Basic_UsesClosure_Closure0 [@cfg:stackify] (_1' : c01basic_usesclosure_closure0) (_2' : ()) : bool
end
module C01Basic_UsesClosure_Closure0
  use prelude.Prelude
  type c01basic_usesclosure_closure0  =
    | C01Basic_UsesClosure_Closure0 bool
    
  let function c01basic_usesclosure_closure0_0 (self : c01basic_usesclosure_closure0) : bool =
    match (self) with
      | C01Basic_UsesClosure_Closure0 a -> a
      end
  let rec cfg c01Basic_UsesClosure_Closure0 [@cfg:stackify] [#"../01_basic.rs" 3 12 18] (_1' : c01basic_usesclosure_closure0) (_2' : ()) : bool
    
   =
  var _0 : bool;
  var _1 : c01basic_usesclosure_closure0;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- c01basic_usesclosure_closure0_0 _1;
    return _0
  }
  
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module Core_Ops_Function_Fn_Call_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module Core_Ops_Function_Fn_Call
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  val call [@cfg:stackify] (self : self) (args : args) : Output0.output
    requires {false}
    
end
module C01Basic_UsesClosure_Interface
  val uses_closure [@cfg:stackify] (_ : ()) : ()
end
module C01Basic_UsesClosure
  use prelude.Prelude
  clone C01Basic_UsesClosure_Closure0_Interface as Closure00 with axiom .
  let rec cfg uses_closure [@cfg:stackify] [#"../01_basic.rs" 1 0 17] (_ : ()) : () =
  var _0 : ();
  var y_1 : bool;
  var x_2 : bool;
  var _3 : Closure00.c01basic_usesclosure_closure0;
  var _4 : Closure00.c01basic_usesclosure_closure0;
  var _5 : bool;
  var _6 : ();
  {
    goto BB0
  }
  BB0 {
    y_1 <- true;
    _5 <- y_1;
    _4 <- Closure00.C01Basic_UsesClosure_Closure0 _5;
    _3 <- _4;
    _6 <- ();
    x_2 <- ([#"../01_basic.rs" 3 12 20] Closure00.c01Basic_UsesClosure_Closure0 _3 _6);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
