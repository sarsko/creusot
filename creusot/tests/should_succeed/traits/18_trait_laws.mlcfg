module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C18TraitLaws_Symmetric_Op_Interface
  type self
  function op (self : self) (_2' : self) : self
end
module C18TraitLaws_Symmetric_Op
  type self
  function op [#"../18_trait_laws.rs" 6 4 33] (self : self) (_2' : self) : self
end
module C18TraitLaws_Symmetric_Reflexive_Interface
  type self
  clone C18TraitLaws_Symmetric_Op_Interface as Op0 with type self = self
  function reflexive (a : self) (b : self) : ()
end
module C18TraitLaws_Symmetric_Reflexive
  type self
  clone C18TraitLaws_Symmetric_Op_Interface as Op0 with type self = self
  function reflexive [#"../18_trait_laws.rs" 10 4 35] (a : self) (b : self) : ()
  axiom reflexive_spec : forall a : self, b : self . [#"../18_trait_laws.rs" 9 4 34] Op0.op a b = Op0.op b a
end
module C18TraitLaws_UsesOp_Interface
  type t
  function uses_op (x : t) (y : t) : bool
end
module C18TraitLaws_UsesOp
  type t
  clone C18TraitLaws_Symmetric_Op_Interface as Op0 with type self = t
  function uses_op [#"../18_trait_laws.rs" 15 0 44] (x : t) (y : t) : bool =
    [#"../18_trait_laws.rs" 15 0 44] Op0.op x y = Op0.op y x
  axiom uses_op_spec : forall x : t, y : t . [#"../18_trait_laws.rs" 14 0 26] uses_op x y = true
end
module C18TraitLaws_UsesOp_Impl
  type t
  clone C18TraitLaws_Symmetric_Op as Op0 with type self = t
  clone C18TraitLaws_Symmetric_Reflexive as Reflexive0 with type self = t, function Op0.op = Op0.op, axiom .
  let rec ghost function uses_op (x : t) (y : t) : bool
    ensures { [#"../18_trait_laws.rs" 14 0 26] result = true }
    
   =
    [#"../18_trait_laws.rs" 15 0 44] let b = Op0.op y x in let a = Op0.op x y in pure {a = b}
end
module C18TraitLaws_Impl0_Op_Interface
  function op (self : ()) (_2' : ()) : ()
end
module C18TraitLaws_Impl0_Op
  function op [#"../18_trait_laws.rs" 21 4 32] (self : ()) (_2' : ()) : () =
    [#"../18_trait_laws.rs" 21 4 32] ()
end
module C18TraitLaws_Impl0_Reflexive_Interface
  function reflexive (_1' : ()) (_2' : ()) : ()
end
module C18TraitLaws_Impl0_Reflexive
  function reflexive [#"../18_trait_laws.rs" 26 4 34] (_1' : ()) (_2' : ()) : () =
    [#"../18_trait_laws.rs" 26 4 34] ()
end
module C18TraitLaws_Impl0
  clone C18TraitLaws_Impl0_Reflexive as Reflexive0
  clone C18TraitLaws_Impl0_Op as Op0
  clone C18TraitLaws_Symmetric_Reflexive_Interface as Reflexive1 with type self = (),
  function reflexive = Reflexive0.reflexive, function Op0.op = Op0.op, axiom .
  clone C18TraitLaws_Symmetric_Op_Interface as Op1 with type self = (), function op = Op0.op
end
module C18TraitLaws_ImplLaws_Interface
  function impl_laws (_ : ()) : bool
end
module C18TraitLaws_ImplLaws
  clone C18TraitLaws_Impl0_Op_Interface as Op0
  function impl_laws [#"../18_trait_laws.rs" 31 0 22] (_ : ()) : bool =
    [#"../18_trait_laws.rs" 31 0 22] Op0.op () () = Op0.op () ()
  axiom impl_laws_spec : [#"../18_trait_laws.rs" 30 0 26] impl_laws () = true
end
module C18TraitLaws_ImplLaws_Impl
  clone C18TraitLaws_Impl0_Reflexive as Reflexive0
  clone C18TraitLaws_Impl0_Op as Op0
  let rec ghost function impl_laws (_ : ()) : bool
    ensures { [#"../18_trait_laws.rs" 30 0 26] result = true }
    
   =
    [#"../18_trait_laws.rs" 31 0 22] let b = Op0.op () () in let a = Op0.op () () in pure {a = b}
end
