module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C15ImplInterfaces_Tr_A
  type self
  type a
end
module C15ImplInterfaces_X_Interface
  type t
  clone C15ImplInterfaces_Tr_A as A0 with type self = t
  function x (x : t) : A0.a
end
module C15ImplInterfaces_X
  type t
  clone C15ImplInterfaces_Tr_A as A0 with type self = t
  function x [#"../15_impl_interfaces.rs" 18 0 25] (x : t) : A0.a
end
module C15ImplInterfaces_Impl0_A
  type a  =
    ()
end
module C15ImplInterfaces_Impl0
  clone C15ImplInterfaces_Impl0_A as A0
  clone C15ImplInterfaces_Tr_A as A1 with type self = (), type a = A0.a
end
module C15ImplInterfaces_Calls_Interface
  clone C15ImplInterfaces_Impl0_A as A0
  clone C15ImplInterfaces_X_Interface as X0 with type t = (), type A0.a = A0.a
  val calls [@cfg:stackify] (a : ()) : ()
    requires {[#"../15_impl_interfaces.rs" 22 0 23] X0.x a = ()}
    
end
module C15ImplInterfaces_Calls
  clone C15ImplInterfaces_Impl0_A as A0
  clone C15ImplInterfaces_X as X0 with type t = (), type A0.a = A0.a
  let rec cfg calls [@cfg:stackify] [#"../15_impl_interfaces.rs" 23 0 32] (a : ()) : ()
    requires {[#"../15_impl_interfaces.rs" 22 0 23] X0.x a = ()}
    
   =
  var _0 : ();
  var a_1 : ();
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
