module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type c10_pair 't 'u =
    | C10_Pair 't 'u
    
  let function c10_pair_Pair_0 (self : c10_pair 't 'u) : 't =
    match (self) with
      | C10_Pair a _ -> a
      end
  let function c10_pair_Pair_1 (self : c10_pair 't 'u) : 'u =
    match (self) with
      | C10_Pair _ a -> a
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module C10_Impl0_Resolve_Interface
  type t1
  type t2
  use Type
  predicate resolve (self : Type.c10_pair t1 t2)
end
module C10_Impl0_Resolve
  type t1
  type t2
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve [#"../10.rs" 10 4 28] (self : Type.c10_pair t1 t2) =
    [#"../10.rs" 10 4 28] Resolve0.resolve (Type.c10_pair_Pair_0 self) && Resolve1.resolve (Type.c10_pair_Pair_1 self)
end
module C10_Impl0
  type t1
  type t2
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone C10_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2, predicate Resolve0.resolve = Resolve2.resolve,
  predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Type.c10_pair t1 t2,
  predicate resolve = Resolve0.resolve
end
