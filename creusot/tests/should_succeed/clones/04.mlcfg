module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C04_A_Interface
  use mach.int.Int
  use mach.int.UInt32
  function a (x : uint32) : bool
end
module C04_A
  use mach.int.Int
  use mach.int.UInt32
  function a [#"../04.rs" 6 0 20] (x : uint32) : bool =
    [#"../04.rs" 6 0 20] x > (0 : uint32)
end
module C04_B_Interface
  use mach.int.Int
  use mach.int.UInt32
  function b (x : uint32) : bool
end
module C04_B
  use mach.int.Int
  use mach.int.UInt32
  clone C04_A_Interface as A0
  function b [#"../04.rs" 11 0 20] (x : uint32) : bool =
    [#"../04.rs" 11 0 20] x > (10 : uint32) && A0.a x
end
module C04_C_Interface
  use mach.int.Int
  use mach.int.UInt32
  function c (x : uint32) : bool
end
module C04_C
  use mach.int.Int
  use mach.int.UInt32
  clone C04_B_Interface as B0
  function c [#"../04.rs" 16 0 20] (x : uint32) : bool =
    [#"../04.rs" 16 0 20] x < (50 : uint32) && B0.b x
end
module C04_F_Interface
  use mach.int.Int
  use mach.int.UInt32
  clone C04_C_Interface as C0
  val f [@cfg:stackify] (x : uint32) : ()
    requires {[#"../04.rs" 20 0 17] C0.c x}
    
end
module C04_F
  use mach.int.Int
  use mach.int.UInt32
  clone C04_A as A0
  clone C04_B as B0 with function A0.a = A0.a
  clone C04_C as C0 with function B0.b = B0.b
  let rec cfg f [@cfg:stackify] [#"../04.rs" 21 0 12] (x : uint32) : ()
    requires {[#"../04.rs" 20 0 17] C0.c x}
    
   =
  var _0 : ();
  var x_1 : uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
