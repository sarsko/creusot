module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module IncMaxRepeat_TakeMax_Interface
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  val take_max [@cfg:stackify] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 56] if  * ma >=  * mb then
       * mb =  ^ mb && result = ma
    else
       * ma =  ^ ma && result = mb
     }
    
end
module IncMaxRepeat_TakeMax
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  let rec cfg take_max [@cfg:stackify] [#"../inc_max_repeat.rs" 6 0 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max_repeat.rs" 4 0 56] if  * ma >=  * mb then
       * mb =  ^ mb && result = ma
    else
       * ma =  ^ ma && result = mb
     }
    
   =
  var _0 : borrowed uint32;
  var ma_1 : borrowed uint32;
  var mb_2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : borrowed uint32;
  var _5 : bool;
  var _6 : uint32;
  var _7 : uint32;
  var _8 : borrowed uint32;
  {
    ma_1 <- ma;
    mb_2 <- mb;
    goto BB0
  }
  BB0 {
    _6 <-  * ma_1;
    _7 <-  * mb_2;
    _5 <- ([#"../inc_max_repeat.rs" 7 7 17] _6 >= _7);
    switch (_5)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve mb_2 };
    _8 <- borrow_mut ( * ma_1);
    ma_1 <- { ma_1 with current = ( ^ _8) };
    assume { Resolve0.resolve ma_1 };
    _4 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _4) };
    assume { Resolve0.resolve _8 };
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve ma_1 };
    _4 <- borrow_mut ( * mb_2);
    mb_2 <- { mb_2 with current = ( ^ _4) };
    assume { Resolve0.resolve mb_2 };
    goto BB3
  }
  BB3 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    assume { Resolve0.resolve _4 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve0.resolve _3 };
    return _0
  }
  
end
module IncMaxRepeat_IncMaxRepeat_Interface
  use mach.int.Int
  use mach.int.UInt32
  val inc_max_repeat [@cfg:stackify] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 0 72] a <= (1000000 : uint32) && b <= (1000000 : uint32) && n <= (1000000 : uint32)}
    
end
module IncMaxRepeat_IncMaxRepeat
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone IncMaxRepeat_TakeMax_Interface as TakeMax0
  let rec cfg inc_max_repeat [@cfg:stackify] [#"../inc_max_repeat.rs" 15 0 49] (a : uint32) (b : uint32) (n : uint32) : ()
    requires {[#"../inc_max_repeat.rs" 14 0 72] a <= (1000000 : uint32) && b <= (1000000 : uint32) && n <= (1000000 : uint32)}
    
   =
  var _0 : ();
  var a_1 : uint32;
  var b_2 : uint32;
  var n_3 : uint32;
  var i_4 : uint32;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : uint32;
  var _9 : uint32;
  var mc_10 : borrowed uint32;
  var _11 : borrowed uint32;
  var _12 : borrowed uint32;
  var _13 : borrowed uint32;
  var _14 : borrowed uint32;
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : bool;
  var _21 : bool;
  var _22 : uint32;
  var _23 : uint32;
  var _24 : uint32;
  var _25 : uint32;
  var _26 : bool;
  var _27 : uint32;
  var _28 : uint32;
  var _29 : uint32;
  var _30 : uint32;
  var _31 : ();
  {
    a_1 <- a;
    b_2 <- b;
    n_3 <- n;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant cntr_bound { [#"../inc_max_repeat.rs" 17 4 36] i_4 <= n_3 };
    invariant val_bound { [#"../inc_max_repeat.rs" 18 4 75] a_1 <= (1000000 : uint32) + i_4 && b_2 <= (1000000 : uint32) + i_4 };
    invariant diff_bound { [#"../inc_max_repeat.rs" 19 4 55] a_1 >= b_2 + i_4 || b_2 >= a_1 + i_4 };
    _8 <- i_4;
    _9 <- n_3;
    _7 <- ([#"../inc_max_repeat.rs" 20 10 15] _8 < _9);
    switch (_7)
      | False -> goto BB4
      | _ -> goto BB2
      end
  }
  BB2 {
    _12 <- borrow_mut a_1;
    a_1 <-  ^ _12;
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _14 <- borrow_mut b_2;
    b_2 <-  ^ _14;
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    mc_10 <- ([#"../inc_max_repeat.rs" 21 17 41] TakeMax0.take_max _11 _13);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _12 };
    assume { Resolve0.resolve _14 };
    mc_10 <- { mc_10 with current = ([#"../inc_max_repeat.rs" 22 8 16]  * mc_10 + (1 : uint32)) };
    assume { Resolve0.resolve mc_10 };
    i_4 <- ([#"../inc_max_repeat.rs" 23 8 14] i_4 + (1 : uint32));
    _6 <- ();
    goto BB1
  }
  BB4 {
    _5 <- ();
    _22 <- a_1;
    _24 <- b_2;
    _25 <- i_4;
    _23 <- ([#"../inc_max_repeat.rs" 25 17 22] _24 + _25);
    _21 <- ([#"../inc_max_repeat.rs" 25 12 22] _22 >= _23);
    switch (_21)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _20 <- true;
    goto BB7
  }
  BB6 {
    _27 <- b_2;
    _29 <- a_1;
    _30 <- i_4;
    _28 <- ([#"../inc_max_repeat.rs" 25 31 36] _29 + _30);
    _26 <- ([#"../inc_max_repeat.rs" 25 26 36] _27 >= _28);
    _20 <- _26;
    goto BB7
  }
  BB7 {
    _19 <- not _20;
    switch (_19)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    absurd
  }
  BB9 {
    _18 <- ();
    _0 <- ();
    return _0
  }
  
end
